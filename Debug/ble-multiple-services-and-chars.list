
ble-multiple-services-and-chars.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024bc  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08002654  08002654  00012654  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080026e0  080026e0  000126e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080026e8  080026e8  000126e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080026ec  080026ec  000126ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000001c  20000000  080026f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000004c8  2000001c  0800270c  0002001c  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  200004e4  0800270c  000204e4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001d29c  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000377d  00000000  00000000  0003d2e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000094e6  00000000  00000000  00040a65  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000d48  00000000  00000000  00049f50  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000ed0  00000000  00000000  0004ac98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000078de  00000000  00000000  0004bb68  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00005891  00000000  00000000  00053446  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00058cd7  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000027f8  00000000  00000000  00058d54  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000001c 	.word	0x2000001c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800263c 	.word	0x0800263c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000020 	.word	0x20000020
 80001d4:	0800263c 	.word	0x0800263c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b97a 	b.w	80004e4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	468c      	mov	ip, r1
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	9e08      	ldr	r6, [sp, #32]
 8000214:	2b00      	cmp	r3, #0
 8000216:	d151      	bne.n	80002bc <__udivmoddi4+0xb4>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d96d      	bls.n	80002fa <__udivmoddi4+0xf2>
 800021e:	fab2 fe82 	clz	lr, r2
 8000222:	f1be 0f00 	cmp.w	lr, #0
 8000226:	d00b      	beq.n	8000240 <__udivmoddi4+0x38>
 8000228:	f1ce 0c20 	rsb	ip, lr, #32
 800022c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000230:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000234:	fa02 f70e 	lsl.w	r7, r2, lr
 8000238:	ea4c 0c05 	orr.w	ip, ip, r5
 800023c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000240:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000244:	0c25      	lsrs	r5, r4, #16
 8000246:	fbbc f8fa 	udiv	r8, ip, sl
 800024a:	fa1f f987 	uxth.w	r9, r7
 800024e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000252:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000256:	fb08 f309 	mul.w	r3, r8, r9
 800025a:	42ab      	cmp	r3, r5
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x6c>
 800025e:	19ed      	adds	r5, r5, r7
 8000260:	f108 32ff 	add.w	r2, r8, #4294967295
 8000264:	f080 8123 	bcs.w	80004ae <__udivmoddi4+0x2a6>
 8000268:	42ab      	cmp	r3, r5
 800026a:	f240 8120 	bls.w	80004ae <__udivmoddi4+0x2a6>
 800026e:	f1a8 0802 	sub.w	r8, r8, #2
 8000272:	443d      	add	r5, r7
 8000274:	1aed      	subs	r5, r5, r3
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb5 f0fa 	udiv	r0, r5, sl
 800027c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000280:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000284:	fb00 f909 	mul.w	r9, r0, r9
 8000288:	45a1      	cmp	r9, r4
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x98>
 800028c:	19e4      	adds	r4, r4, r7
 800028e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000292:	f080 810a 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 8000296:	45a1      	cmp	r9, r4
 8000298:	f240 8107 	bls.w	80004aa <__udivmoddi4+0x2a2>
 800029c:	3802      	subs	r0, #2
 800029e:	443c      	add	r4, r7
 80002a0:	eba4 0409 	sub.w	r4, r4, r9
 80002a4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002a8:	2100      	movs	r1, #0
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	d061      	beq.n	8000372 <__udivmoddi4+0x16a>
 80002ae:	fa24 f40e 	lsr.w	r4, r4, lr
 80002b2:	2300      	movs	r3, #0
 80002b4:	6034      	str	r4, [r6, #0]
 80002b6:	6073      	str	r3, [r6, #4]
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	428b      	cmp	r3, r1
 80002be:	d907      	bls.n	80002d0 <__udivmoddi4+0xc8>
 80002c0:	2e00      	cmp	r6, #0
 80002c2:	d054      	beq.n	800036e <__udivmoddi4+0x166>
 80002c4:	2100      	movs	r1, #0
 80002c6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ca:	4608      	mov	r0, r1
 80002cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d0:	fab3 f183 	clz	r1, r3
 80002d4:	2900      	cmp	r1, #0
 80002d6:	f040 808e 	bne.w	80003f6 <__udivmoddi4+0x1ee>
 80002da:	42ab      	cmp	r3, r5
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xdc>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80fa 	bhi.w	80004d8 <__udivmoddi4+0x2d0>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb65 0503 	sbc.w	r5, r5, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	46ac      	mov	ip, r5
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	d03f      	beq.n	8000372 <__udivmoddi4+0x16a>
 80002f2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	b912      	cbnz	r2, 8000302 <__udivmoddi4+0xfa>
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb7 f7f2 	udiv	r7, r7, r2
 8000302:	fab7 fe87 	clz	lr, r7
 8000306:	f1be 0f00 	cmp.w	lr, #0
 800030a:	d134      	bne.n	8000376 <__udivmoddi4+0x16e>
 800030c:	1beb      	subs	r3, r5, r7
 800030e:	0c3a      	lsrs	r2, r7, #16
 8000310:	fa1f fc87 	uxth.w	ip, r7
 8000314:	2101      	movs	r1, #1
 8000316:	fbb3 f8f2 	udiv	r8, r3, r2
 800031a:	0c25      	lsrs	r5, r4, #16
 800031c:	fb02 3318 	mls	r3, r2, r8, r3
 8000320:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000324:	fb0c f308 	mul.w	r3, ip, r8
 8000328:	42ab      	cmp	r3, r5
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x134>
 800032c:	19ed      	adds	r5, r5, r7
 800032e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x132>
 8000334:	42ab      	cmp	r3, r5
 8000336:	f200 80d1 	bhi.w	80004dc <__udivmoddi4+0x2d4>
 800033a:	4680      	mov	r8, r0
 800033c:	1aed      	subs	r5, r5, r3
 800033e:	b2a3      	uxth	r3, r4
 8000340:	fbb5 f0f2 	udiv	r0, r5, r2
 8000344:	fb02 5510 	mls	r5, r2, r0, r5
 8000348:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800034c:	fb0c fc00 	mul.w	ip, ip, r0
 8000350:	45a4      	cmp	ip, r4
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x15c>
 8000354:	19e4      	adds	r4, r4, r7
 8000356:	f100 33ff 	add.w	r3, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x15a>
 800035c:	45a4      	cmp	ip, r4
 800035e:	f200 80b8 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 8000362:	4618      	mov	r0, r3
 8000364:	eba4 040c 	sub.w	r4, r4, ip
 8000368:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800036c:	e79d      	b.n	80002aa <__udivmoddi4+0xa2>
 800036e:	4631      	mov	r1, r6
 8000370:	4630      	mov	r0, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	f1ce 0420 	rsb	r4, lr, #32
 800037a:	fa05 f30e 	lsl.w	r3, r5, lr
 800037e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000382:	fa20 f804 	lsr.w	r8, r0, r4
 8000386:	0c3a      	lsrs	r2, r7, #16
 8000388:	fa25 f404 	lsr.w	r4, r5, r4
 800038c:	ea48 0803 	orr.w	r8, r8, r3
 8000390:	fbb4 f1f2 	udiv	r1, r4, r2
 8000394:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000398:	fb02 4411 	mls	r4, r2, r1, r4
 800039c:	fa1f fc87 	uxth.w	ip, r7
 80003a0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003a4:	fb01 f30c 	mul.w	r3, r1, ip
 80003a8:	42ab      	cmp	r3, r5
 80003aa:	fa00 f40e 	lsl.w	r4, r0, lr
 80003ae:	d909      	bls.n	80003c4 <__udivmoddi4+0x1bc>
 80003b0:	19ed      	adds	r5, r5, r7
 80003b2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003b6:	f080 808a 	bcs.w	80004ce <__udivmoddi4+0x2c6>
 80003ba:	42ab      	cmp	r3, r5
 80003bc:	f240 8087 	bls.w	80004ce <__udivmoddi4+0x2c6>
 80003c0:	3902      	subs	r1, #2
 80003c2:	443d      	add	r5, r7
 80003c4:	1aeb      	subs	r3, r5, r3
 80003c6:	fa1f f588 	uxth.w	r5, r8
 80003ca:	fbb3 f0f2 	udiv	r0, r3, r2
 80003ce:	fb02 3310 	mls	r3, r2, r0, r3
 80003d2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003d6:	fb00 f30c 	mul.w	r3, r0, ip
 80003da:	42ab      	cmp	r3, r5
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1e6>
 80003de:	19ed      	adds	r5, r5, r7
 80003e0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003e4:	d26f      	bcs.n	80004c6 <__udivmoddi4+0x2be>
 80003e6:	42ab      	cmp	r3, r5
 80003e8:	d96d      	bls.n	80004c6 <__udivmoddi4+0x2be>
 80003ea:	3802      	subs	r0, #2
 80003ec:	443d      	add	r5, r7
 80003ee:	1aeb      	subs	r3, r5, r3
 80003f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f4:	e78f      	b.n	8000316 <__udivmoddi4+0x10e>
 80003f6:	f1c1 0720 	rsb	r7, r1, #32
 80003fa:	fa22 f807 	lsr.w	r8, r2, r7
 80003fe:	408b      	lsls	r3, r1
 8000400:	fa05 f401 	lsl.w	r4, r5, r1
 8000404:	ea48 0303 	orr.w	r3, r8, r3
 8000408:	fa20 fe07 	lsr.w	lr, r0, r7
 800040c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000410:	40fd      	lsrs	r5, r7
 8000412:	ea4e 0e04 	orr.w	lr, lr, r4
 8000416:	fbb5 f9fc 	udiv	r9, r5, ip
 800041a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800041e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000422:	fa1f f883 	uxth.w	r8, r3
 8000426:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800042a:	fb09 f408 	mul.w	r4, r9, r8
 800042e:	42ac      	cmp	r4, r5
 8000430:	fa02 f201 	lsl.w	r2, r2, r1
 8000434:	fa00 fa01 	lsl.w	sl, r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x244>
 800043a:	18ed      	adds	r5, r5, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	d243      	bcs.n	80004ca <__udivmoddi4+0x2c2>
 8000442:	42ac      	cmp	r4, r5
 8000444:	d941      	bls.n	80004ca <__udivmoddi4+0x2c2>
 8000446:	f1a9 0902 	sub.w	r9, r9, #2
 800044a:	441d      	add	r5, r3
 800044c:	1b2d      	subs	r5, r5, r4
 800044e:	fa1f fe8e 	uxth.w	lr, lr
 8000452:	fbb5 f0fc 	udiv	r0, r5, ip
 8000456:	fb0c 5510 	mls	r5, ip, r0, r5
 800045a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800045e:	fb00 f808 	mul.w	r8, r0, r8
 8000462:	45a0      	cmp	r8, r4
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x26e>
 8000466:	18e4      	adds	r4, r4, r3
 8000468:	f100 35ff 	add.w	r5, r0, #4294967295
 800046c:	d229      	bcs.n	80004c2 <__udivmoddi4+0x2ba>
 800046e:	45a0      	cmp	r8, r4
 8000470:	d927      	bls.n	80004c2 <__udivmoddi4+0x2ba>
 8000472:	3802      	subs	r0, #2
 8000474:	441c      	add	r4, r3
 8000476:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047a:	eba4 0408 	sub.w	r4, r4, r8
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	454c      	cmp	r4, r9
 8000484:	46c6      	mov	lr, r8
 8000486:	464d      	mov	r5, r9
 8000488:	d315      	bcc.n	80004b6 <__udivmoddi4+0x2ae>
 800048a:	d012      	beq.n	80004b2 <__udivmoddi4+0x2aa>
 800048c:	b156      	cbz	r6, 80004a4 <__udivmoddi4+0x29c>
 800048e:	ebba 030e 	subs.w	r3, sl, lr
 8000492:	eb64 0405 	sbc.w	r4, r4, r5
 8000496:	fa04 f707 	lsl.w	r7, r4, r7
 800049a:	40cb      	lsrs	r3, r1
 800049c:	431f      	orrs	r7, r3
 800049e:	40cc      	lsrs	r4, r1
 80004a0:	6037      	str	r7, [r6, #0]
 80004a2:	6074      	str	r4, [r6, #4]
 80004a4:	2100      	movs	r1, #0
 80004a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004aa:	4618      	mov	r0, r3
 80004ac:	e6f8      	b.n	80002a0 <__udivmoddi4+0x98>
 80004ae:	4690      	mov	r8, r2
 80004b0:	e6e0      	b.n	8000274 <__udivmoddi4+0x6c>
 80004b2:	45c2      	cmp	sl, r8
 80004b4:	d2ea      	bcs.n	800048c <__udivmoddi4+0x284>
 80004b6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ba:	eb69 0503 	sbc.w	r5, r9, r3
 80004be:	3801      	subs	r0, #1
 80004c0:	e7e4      	b.n	800048c <__udivmoddi4+0x284>
 80004c2:	4628      	mov	r0, r5
 80004c4:	e7d7      	b.n	8000476 <__udivmoddi4+0x26e>
 80004c6:	4640      	mov	r0, r8
 80004c8:	e791      	b.n	80003ee <__udivmoddi4+0x1e6>
 80004ca:	4681      	mov	r9, r0
 80004cc:	e7be      	b.n	800044c <__udivmoddi4+0x244>
 80004ce:	4601      	mov	r1, r0
 80004d0:	e778      	b.n	80003c4 <__udivmoddi4+0x1bc>
 80004d2:	3802      	subs	r0, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	e745      	b.n	8000364 <__udivmoddi4+0x15c>
 80004d8:	4608      	mov	r0, r1
 80004da:	e708      	b.n	80002ee <__udivmoddi4+0xe6>
 80004dc:	f1a8 0802 	sub.w	r8, r8, #2
 80004e0:	443d      	add	r5, r7
 80004e2:	e72b      	b.n	800033c <__udivmoddi4+0x134>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004e8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004ea:	4a0e      	ldr	r2, [pc, #56]	; (8000524 <HAL_InitTick+0x3c>)
 80004ec:	4b0e      	ldr	r3, [pc, #56]	; (8000528 <HAL_InitTick+0x40>)
{
 80004ee:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004f0:	7818      	ldrb	r0, [r3, #0]
 80004f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004f6:	fbb3 f3f0 	udiv	r3, r3, r0
 80004fa:	6810      	ldr	r0, [r2, #0]
 80004fc:	fbb0 f0f3 	udiv	r0, r0, r3
 8000500:	f000 f8aa 	bl	8000658 <HAL_SYSTICK_Config>
 8000504:	4604      	mov	r4, r0
 8000506:	b958      	cbnz	r0, 8000520 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000508:	2d0f      	cmp	r5, #15
 800050a:	d809      	bhi.n	8000520 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800050c:	4602      	mov	r2, r0
 800050e:	4629      	mov	r1, r5
 8000510:	f04f 30ff 	mov.w	r0, #4294967295
 8000514:	f000 f85e 	bl	80005d4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000518:	4b04      	ldr	r3, [pc, #16]	; (800052c <HAL_InitTick+0x44>)
 800051a:	4620      	mov	r0, r4
 800051c:	601d      	str	r5, [r3, #0]
 800051e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000520:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000522:	bd38      	pop	{r3, r4, r5, pc}
 8000524:	20000018 	.word	0x20000018
 8000528:	20000000 	.word	0x20000000
 800052c:	20000004 	.word	0x20000004

08000530 <HAL_Init>:
{
 8000530:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000532:	4b0b      	ldr	r3, [pc, #44]	; (8000560 <HAL_Init+0x30>)
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800053a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800053c:	681a      	ldr	r2, [r3, #0]
 800053e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000542:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000544:	681a      	ldr	r2, [r3, #0]
 8000546:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800054a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800054c:	2003      	movs	r0, #3
 800054e:	f000 f82f 	bl	80005b0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000552:	2000      	movs	r0, #0
 8000554:	f7ff ffc8 	bl	80004e8 <HAL_InitTick>
  HAL_MspInit();
 8000558:	f001 feea 	bl	8002330 <HAL_MspInit>
}
 800055c:	2000      	movs	r0, #0
 800055e:	bd08      	pop	{r3, pc}
 8000560:	40023c00 	.word	0x40023c00

08000564 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000564:	4a03      	ldr	r2, [pc, #12]	; (8000574 <HAL_IncTick+0x10>)
 8000566:	4b04      	ldr	r3, [pc, #16]	; (8000578 <HAL_IncTick+0x14>)
 8000568:	6811      	ldr	r1, [r2, #0]
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	440b      	add	r3, r1
 800056e:	6013      	str	r3, [r2, #0]
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	20000420 	.word	0x20000420
 8000578:	20000000 	.word	0x20000000

0800057c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800057c:	4b01      	ldr	r3, [pc, #4]	; (8000584 <HAL_GetTick+0x8>)
 800057e:	6818      	ldr	r0, [r3, #0]
}
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	20000420 	.word	0x20000420

08000588 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000588:	b538      	push	{r3, r4, r5, lr}
 800058a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800058c:	f7ff fff6 	bl	800057c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000590:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000592:	bf1c      	itt	ne
 8000594:	4b05      	ldrne	r3, [pc, #20]	; (80005ac <HAL_Delay+0x24>)
 8000596:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000598:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800059a:	bf18      	it	ne
 800059c:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800059e:	f7ff ffed 	bl	800057c <HAL_GetTick>
 80005a2:	1b40      	subs	r0, r0, r5
 80005a4:	4284      	cmp	r4, r0
 80005a6:	d8fa      	bhi.n	800059e <HAL_Delay+0x16>
  {
  }
}
 80005a8:	bd38      	pop	{r3, r4, r5, pc}
 80005aa:	bf00      	nop
 80005ac:	20000000 	.word	0x20000000

080005b0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005b0:	4a07      	ldr	r2, [pc, #28]	; (80005d0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80005b2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005b4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80005b8:	041b      	lsls	r3, r3, #16
 80005ba:	0c1b      	lsrs	r3, r3, #16
 80005bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005c0:	0200      	lsls	r0, r0, #8
 80005c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005c6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80005ca:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80005cc:	60d3      	str	r3, [r2, #12]
 80005ce:	4770      	bx	lr
 80005d0:	e000ed00 	.word	0xe000ed00

080005d4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005d4:	4b17      	ldr	r3, [pc, #92]	; (8000634 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005d6:	b530      	push	{r4, r5, lr}
 80005d8:	68dc      	ldr	r4, [r3, #12]
 80005da:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005de:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005e2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005e4:	2b04      	cmp	r3, #4
 80005e6:	bf28      	it	cs
 80005e8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005ea:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005ec:	f04f 0501 	mov.w	r5, #1
 80005f0:	fa05 f303 	lsl.w	r3, r5, r3
 80005f4:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005f8:	bf8c      	ite	hi
 80005fa:	3c03      	subhi	r4, #3
 80005fc:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005fe:	4019      	ands	r1, r3
 8000600:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000602:	fa05 f404 	lsl.w	r4, r5, r4
 8000606:	3c01      	subs	r4, #1
 8000608:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 800060a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800060c:	ea42 0201 	orr.w	r2, r2, r1
 8000610:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000614:	bfad      	iteet	ge
 8000616:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800061a:	f000 000f 	andlt.w	r0, r0, #15
 800061e:	4b06      	ldrlt	r3, [pc, #24]	; (8000638 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000620:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000624:	bfb5      	itete	lt
 8000626:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000628:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800062a:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800062c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop
 8000634:	e000ed00 	.word	0xe000ed00
 8000638:	e000ed14 	.word	0xe000ed14

0800063c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800063c:	2800      	cmp	r0, #0
 800063e:	db08      	blt.n	8000652 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000640:	0942      	lsrs	r2, r0, #5
 8000642:	2301      	movs	r3, #1
 8000644:	f000 001f 	and.w	r0, r0, #31
 8000648:	fa03 f000 	lsl.w	r0, r3, r0
 800064c:	4b01      	ldr	r3, [pc, #4]	; (8000654 <HAL_NVIC_EnableIRQ+0x18>)
 800064e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000652:	4770      	bx	lr
 8000654:	e000e100 	.word	0xe000e100

08000658 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000658:	3801      	subs	r0, #1
 800065a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800065e:	d20a      	bcs.n	8000676 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000660:	4b06      	ldr	r3, [pc, #24]	; (800067c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000662:	4a07      	ldr	r2, [pc, #28]	; (8000680 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000664:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000666:	21f0      	movs	r1, #240	; 0xf0
 8000668:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800066c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800066e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000670:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000676:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	e000e010 	.word	0xe000e010
 8000680:	e000ed00 	.word	0xe000ed00

08000684 <HAL_EXTI_RegisterCallback>:
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
  HAL_StatusTypeDef status = HAL_OK;

  switch (CallbackID)
 8000684:	b911      	cbnz	r1, 800068c <HAL_EXTI_RegisterCallback+0x8>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8000686:	6042      	str	r2, [r0, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000688:	4608      	mov	r0, r1
      break;
 800068a:	4770      	bx	lr

    default:
      status = HAL_ERROR;
 800068c:	2001      	movs	r0, #1
      break;
  }

  return status;
}
 800068e:	4770      	bx	lr

08000690 <HAL_EXTI_GetHandle>:
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8000690:	b110      	cbz	r0, 8000698 <HAL_EXTI_GetHandle+0x8>
    return HAL_ERROR;
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8000692:	6001      	str	r1, [r0, #0]

    return HAL_OK;
 8000694:	2000      	movs	r0, #0
 8000696:	4770      	bx	lr
    return HAL_ERROR;
 8000698:	2001      	movs	r0, #1
  }
}
 800069a:	4770      	bx	lr

0800069c <HAL_EXTI_IRQHandler>:
{
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 800069c:	6803      	ldr	r3, [r0, #0]
 800069e:	f003 021f 	and.w	r2, r3, #31
 80006a2:	2301      	movs	r3, #1
 80006a4:	4093      	lsls	r3, r2

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 80006a6:	4a04      	ldr	r2, [pc, #16]	; (80006b8 <HAL_EXTI_IRQHandler+0x1c>)
 80006a8:	6951      	ldr	r1, [r2, #20]
  if (regval != 0x00u)
 80006aa:	420b      	tst	r3, r1
 80006ac:	d003      	beq.n	80006b6 <HAL_EXTI_IRQHandler+0x1a>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 80006ae:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80006b0:	6843      	ldr	r3, [r0, #4]
 80006b2:	b103      	cbz	r3, 80006b6 <HAL_EXTI_IRQHandler+0x1a>
    {
      hexti->PendingCallback();
 80006b4:	4718      	bx	r3
 80006b6:	4770      	bx	lr
 80006b8:	40013c00 	.word	0x40013c00

080006bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80006bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80006c0:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006c2:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006c4:	f8df 818c 	ldr.w	r8, [pc, #396]	; 8000854 <HAL_GPIO_Init+0x198>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80006c8:	4a60      	ldr	r2, [pc, #384]	; (800084c <HAL_GPIO_Init+0x190>)
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006ca:	9301      	str	r3, [sp, #4]
    ioposition = 0x01U << position;
 80006cc:	f04f 0901 	mov.w	r9, #1
  for(position = 0U; position < GPIO_NUMBER; position++)
 80006d0:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006d2:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 80006d4:	fa09 f403 	lsl.w	r4, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006d8:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 80006da:	42ac      	cmp	r4, r5
 80006dc:	f040 80a6 	bne.w	800082c <HAL_GPIO_Init+0x170>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006e0:	684c      	ldr	r4, [r1, #4]
 80006e2:	f024 0c10 	bic.w	ip, r4, #16
 80006e6:	f10c 36ff 	add.w	r6, ip, #4294967295
 80006ea:	2e01      	cmp	r6, #1
 80006ec:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80006f0:	d812      	bhi.n	8000718 <HAL_GPIO_Init+0x5c>
        temp = GPIOx->OSPEEDR; 
 80006f2:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80006f4:	2603      	movs	r6, #3
 80006f6:	fa06 f60e 	lsl.w	r6, r6, lr
 80006fa:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 80006fe:	68ce      	ldr	r6, [r1, #12]
 8000700:	fa06 f60e 	lsl.w	r6, r6, lr
 8000704:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8000706:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000708:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800070a:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800070e:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000712:	409e      	lsls	r6, r3
 8000714:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 8000716:	6046      	str	r6, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000718:	2603      	movs	r6, #3
      temp = GPIOx->PUPDR;
 800071a:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800071c:	fa06 f60e 	lsl.w	r6, r6, lr
 8000720:	43f6      	mvns	r6, r6
 8000722:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000726:	688f      	ldr	r7, [r1, #8]
 8000728:	fa07 f70e 	lsl.w	r7, r7, lr
 800072c:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000730:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 8000734:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000736:	d116      	bne.n	8000766 <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 8000738:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 800073c:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000740:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000744:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000748:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800074c:	f04f 0c0f 	mov.w	ip, #15
 8000750:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000754:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000758:	690f      	ldr	r7, [r1, #16]
 800075a:	fa07 f70b 	lsl.w	r7, r7, fp
 800075e:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000762:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8000766:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000768:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800076a:	f004 0703 	and.w	r7, r4, #3
 800076e:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000772:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 8000776:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000778:	00e6      	lsls	r6, r4, #3
 800077a:	d557      	bpl.n	800082c <HAL_GPIO_Init+0x170>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800077c:	f04f 0b00 	mov.w	fp, #0
 8000780:	f8cd b00c 	str.w	fp, [sp, #12]
 8000784:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000788:	4e31      	ldr	r6, [pc, #196]	; (8000850 <HAL_GPIO_Init+0x194>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800078a:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 800078e:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000792:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000796:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 800079a:	9703      	str	r7, [sp, #12]
 800079c:	9f03      	ldr	r7, [sp, #12]
 800079e:	f023 0703 	bic.w	r7, r3, #3
 80007a2:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80007a6:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80007aa:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80007ae:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80007b2:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80007b6:	f04f 0e0f 	mov.w	lr, #15
 80007ba:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007be:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80007c0:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007c4:	d039      	beq.n	800083a <HAL_GPIO_Init+0x17e>
 80007c6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80007ca:	42b0      	cmp	r0, r6
 80007cc:	d037      	beq.n	800083e <HAL_GPIO_Init+0x182>
 80007ce:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80007d2:	42b0      	cmp	r0, r6
 80007d4:	d035      	beq.n	8000842 <HAL_GPIO_Init+0x186>
 80007d6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80007da:	42b0      	cmp	r0, r6
 80007dc:	d033      	beq.n	8000846 <HAL_GPIO_Init+0x18a>
 80007de:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80007e2:	42b0      	cmp	r0, r6
 80007e4:	bf14      	ite	ne
 80007e6:	2607      	movne	r6, #7
 80007e8:	2604      	moveq	r6, #4
 80007ea:	fa06 f60c 	lsl.w	r6, r6, ip
 80007ee:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80007f2:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 80007f4:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80007f6:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80007f8:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80007fc:	bf0c      	ite	eq
 80007fe:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000800:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 8000802:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8000804:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000806:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800080a:	bf0c      	ite	eq
 800080c:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 800080e:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 8000810:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000812:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000814:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000818:	bf0c      	ite	eq
 800081a:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 800081c:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 800081e:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8000820:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000822:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000824:	bf54      	ite	pl
 8000826:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8000828:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 800082a:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800082c:	3301      	adds	r3, #1
 800082e:	2b10      	cmp	r3, #16
 8000830:	f47f af4f 	bne.w	80006d2 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000834:	b005      	add	sp, #20
 8000836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800083a:	465e      	mov	r6, fp
 800083c:	e7d5      	b.n	80007ea <HAL_GPIO_Init+0x12e>
 800083e:	2601      	movs	r6, #1
 8000840:	e7d3      	b.n	80007ea <HAL_GPIO_Init+0x12e>
 8000842:	2602      	movs	r6, #2
 8000844:	e7d1      	b.n	80007ea <HAL_GPIO_Init+0x12e>
 8000846:	2603      	movs	r6, #3
 8000848:	e7cf      	b.n	80007ea <HAL_GPIO_Init+0x12e>
 800084a:	bf00      	nop
 800084c:	40013c00 	.word	0x40013c00
 8000850:	40020000 	.word	0x40020000
 8000854:	40023800 	.word	0x40023800

08000858 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8000858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FU << (4U * (position & 0x03U)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800085c:	4c37      	ldr	r4, [pc, #220]	; (800093c <HAL_GPIO_DeInit+0xe4>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 800085e:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000860:	f04f 0a01 	mov.w	sl, #1
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8000864:	f04f 080f 	mov.w	r8, #15
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000868:	f04f 0b03 	mov.w	fp, #3
    ioposition = 0x01U << position;
 800086c:	fa0a fe03 	lsl.w	lr, sl, r3
    iocurrent = (GPIO_Pin) & ioposition;
 8000870:	ea0e 0201 	and.w	r2, lr, r1
    if(iocurrent == ioposition)
 8000874:	4596      	cmp	lr, r2
 8000876:	d153      	bne.n	8000920 <HAL_GPIO_DeInit+0xc8>
 8000878:	f023 0503 	bic.w	r5, r3, #3
 800087c:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8000880:	f505 359c 	add.w	r5, r5, #79872	; 0x13800
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8000884:	f003 0703 	and.w	r7, r3, #3
      tmp = SYSCFG->EXTICR[position >> 2U];
 8000888:	68ae      	ldr	r6, [r5, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800088a:	00bf      	lsls	r7, r7, #2
 800088c:	fa08 f907 	lsl.w	r9, r8, r7
 8000890:	ea06 0c09 	and.w	ip, r6, r9
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8000894:	4e2a      	ldr	r6, [pc, #168]	; (8000940 <HAL_GPIO_DeInit+0xe8>)
 8000896:	42b0      	cmp	r0, r6
 8000898:	d047      	beq.n	800092a <HAL_GPIO_DeInit+0xd2>
 800089a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800089e:	42b0      	cmp	r0, r6
 80008a0:	d045      	beq.n	800092e <HAL_GPIO_DeInit+0xd6>
 80008a2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80008a6:	42b0      	cmp	r0, r6
 80008a8:	d043      	beq.n	8000932 <HAL_GPIO_DeInit+0xda>
 80008aa:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80008ae:	42b0      	cmp	r0, r6
 80008b0:	d041      	beq.n	8000936 <HAL_GPIO_DeInit+0xde>
 80008b2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80008b6:	42b0      	cmp	r0, r6
 80008b8:	bf0c      	ite	eq
 80008ba:	2604      	moveq	r6, #4
 80008bc:	2607      	movne	r6, #7
 80008be:	40be      	lsls	r6, r7
 80008c0:	45b4      	cmp	ip, r6
 80008c2:	d110      	bne.n	80008e6 <HAL_GPIO_DeInit+0x8e>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80008c4:	6826      	ldr	r6, [r4, #0]
 80008c6:	43d2      	mvns	r2, r2
 80008c8:	4016      	ands	r6, r2
 80008ca:	6026      	str	r6, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80008cc:	6866      	ldr	r6, [r4, #4]
 80008ce:	4016      	ands	r6, r2
 80008d0:	6066      	str	r6, [r4, #4]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80008d2:	68a6      	ldr	r6, [r4, #8]
 80008d4:	4016      	ands	r6, r2
 80008d6:	60a6      	str	r6, [r4, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80008d8:	68e6      	ldr	r6, [r4, #12]
 80008da:	4032      	ands	r2, r6
 80008dc:	60e2      	str	r2, [r4, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80008de:	68aa      	ldr	r2, [r5, #8]
 80008e0:	ea22 0209 	bic.w	r2, r2, r9
 80008e4:	60aa      	str	r2, [r5, #8]
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80008e6:	005a      	lsls	r2, r3, #1
 80008e8:	6805      	ldr	r5, [r0, #0]
 80008ea:	fa0b f202 	lsl.w	r2, fp, r2
 80008ee:	43d2      	mvns	r2, r2

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80008f0:	08de      	lsrs	r6, r3, #3
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80008f2:	4015      	ands	r5, r2
 80008f4:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 80008f8:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80008fa:	f003 0507 	and.w	r5, r3, #7
 80008fe:	6a37      	ldr	r7, [r6, #32]
 8000900:	00ad      	lsls	r5, r5, #2
 8000902:	fa08 f505 	lsl.w	r5, r8, r5
 8000906:	ea27 0505 	bic.w	r5, r7, r5
 800090a:	6235      	str	r5, [r6, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800090c:	68c5      	ldr	r5, [r0, #12]
 800090e:	4015      	ands	r5, r2
 8000910:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000912:	6845      	ldr	r5, [r0, #4]
 8000914:	ea25 050e 	bic.w	r5, r5, lr
 8000918:	6045      	str	r5, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800091a:	6885      	ldr	r5, [r0, #8]
 800091c:	402a      	ands	r2, r5
 800091e:	6082      	str	r2, [r0, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000920:	3301      	adds	r3, #1
 8000922:	2b10      	cmp	r3, #16
 8000924:	d1a2      	bne.n	800086c <HAL_GPIO_DeInit+0x14>
    }
  }
}
 8000926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800092a:	2600      	movs	r6, #0
 800092c:	e7c7      	b.n	80008be <HAL_GPIO_DeInit+0x66>
 800092e:	2601      	movs	r6, #1
 8000930:	e7c5      	b.n	80008be <HAL_GPIO_DeInit+0x66>
 8000932:	2602      	movs	r6, #2
 8000934:	e7c3      	b.n	80008be <HAL_GPIO_DeInit+0x66>
 8000936:	2603      	movs	r6, #3
 8000938:	e7c1      	b.n	80008be <HAL_GPIO_DeInit+0x66>
 800093a:	bf00      	nop
 800093c:	40013c00 	.word	0x40013c00
 8000940:	40020000 	.word	0x40020000

08000944 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000944:	6903      	ldr	r3, [r0, #16]
 8000946:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000948:	bf14      	ite	ne
 800094a:	2001      	movne	r0, #1
 800094c:	2000      	moveq	r0, #0
 800094e:	4770      	bx	lr

08000950 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000950:	b10a      	cbz	r2, 8000956 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000952:	6181      	str	r1, [r0, #24]
 8000954:	4770      	bx	lr
 8000956:	0409      	lsls	r1, r1, #16
 8000958:	e7fb      	b.n	8000952 <HAL_GPIO_WritePin+0x2>
	...

0800095c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800095c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000960:	4604      	mov	r4, r0
 8000962:	b908      	cbnz	r0, 8000968 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8000964:	2001      	movs	r0, #1
 8000966:	e03f      	b.n	80009e8 <HAL_RCC_OscConfig+0x8c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000968:	6803      	ldr	r3, [r0, #0]
 800096a:	07dd      	lsls	r5, r3, #31
 800096c:	d410      	bmi.n	8000990 <HAL_RCC_OscConfig+0x34>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800096e:	6823      	ldr	r3, [r4, #0]
 8000970:	0798      	lsls	r0, r3, #30
 8000972:	d45a      	bmi.n	8000a2a <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000974:	6823      	ldr	r3, [r4, #0]
 8000976:	071a      	lsls	r2, r3, #28
 8000978:	f100 809c 	bmi.w	8000ab4 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800097c:	6823      	ldr	r3, [r4, #0]
 800097e:	075b      	lsls	r3, r3, #29
 8000980:	f100 80ba 	bmi.w	8000af8 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000984:	69a0      	ldr	r0, [r4, #24]
 8000986:	2800      	cmp	r0, #0
 8000988:	f040 811b 	bne.w	8000bc2 <HAL_RCC_OscConfig+0x266>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 800098c:	2000      	movs	r0, #0
 800098e:	e02b      	b.n	80009e8 <HAL_RCC_OscConfig+0x8c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000990:	4ba4      	ldr	r3, [pc, #656]	; (8000c24 <HAL_RCC_OscConfig+0x2c8>)
 8000992:	689a      	ldr	r2, [r3, #8]
 8000994:	f002 020c 	and.w	r2, r2, #12
 8000998:	2a04      	cmp	r2, #4
 800099a:	d007      	beq.n	80009ac <HAL_RCC_OscConfig+0x50>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800099c:	689a      	ldr	r2, [r3, #8]
 800099e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80009a2:	2a08      	cmp	r2, #8
 80009a4:	d10a      	bne.n	80009bc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80009a6:	685b      	ldr	r3, [r3, #4]
 80009a8:	0259      	lsls	r1, r3, #9
 80009aa:	d507      	bpl.n	80009bc <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80009ac:	4b9d      	ldr	r3, [pc, #628]	; (8000c24 <HAL_RCC_OscConfig+0x2c8>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	039a      	lsls	r2, r3, #14
 80009b2:	d5dc      	bpl.n	800096e <HAL_RCC_OscConfig+0x12>
 80009b4:	6863      	ldr	r3, [r4, #4]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d1d9      	bne.n	800096e <HAL_RCC_OscConfig+0x12>
 80009ba:	e7d3      	b.n	8000964 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009bc:	6863      	ldr	r3, [r4, #4]
 80009be:	4d99      	ldr	r5, [pc, #612]	; (8000c24 <HAL_RCC_OscConfig+0x2c8>)
 80009c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80009c4:	d113      	bne.n	80009ee <HAL_RCC_OscConfig+0x92>
 80009c6:	682b      	ldr	r3, [r5, #0]
 80009c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009cc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80009ce:	f7ff fdd5 	bl	800057c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009d2:	4d94      	ldr	r5, [pc, #592]	; (8000c24 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 80009d4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009d6:	682b      	ldr	r3, [r5, #0]
 80009d8:	039b      	lsls	r3, r3, #14
 80009da:	d4c8      	bmi.n	800096e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80009dc:	f7ff fdce 	bl	800057c <HAL_GetTick>
 80009e0:	1b80      	subs	r0, r0, r6
 80009e2:	2864      	cmp	r0, #100	; 0x64
 80009e4:	d9f7      	bls.n	80009d6 <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 80009e6:	2003      	movs	r0, #3
}
 80009e8:	b002      	add	sp, #8
 80009ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80009f2:	d104      	bne.n	80009fe <HAL_RCC_OscConfig+0xa2>
 80009f4:	682b      	ldr	r3, [r5, #0]
 80009f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009fa:	602b      	str	r3, [r5, #0]
 80009fc:	e7e3      	b.n	80009c6 <HAL_RCC_OscConfig+0x6a>
 80009fe:	682a      	ldr	r2, [r5, #0]
 8000a00:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000a04:	602a      	str	r2, [r5, #0]
 8000a06:	682a      	ldr	r2, [r5, #0]
 8000a08:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000a0c:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d1dd      	bne.n	80009ce <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 8000a12:	f7ff fdb3 	bl	800057c <HAL_GetTick>
 8000a16:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a18:	682b      	ldr	r3, [r5, #0]
 8000a1a:	039f      	lsls	r7, r3, #14
 8000a1c:	d5a7      	bpl.n	800096e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a1e:	f7ff fdad 	bl	800057c <HAL_GetTick>
 8000a22:	1b80      	subs	r0, r0, r6
 8000a24:	2864      	cmp	r0, #100	; 0x64
 8000a26:	d9f7      	bls.n	8000a18 <HAL_RCC_OscConfig+0xbc>
 8000a28:	e7dd      	b.n	80009e6 <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000a2a:	4b7e      	ldr	r3, [pc, #504]	; (8000c24 <HAL_RCC_OscConfig+0x2c8>)
 8000a2c:	689a      	ldr	r2, [r3, #8]
 8000a2e:	f012 0f0c 	tst.w	r2, #12
 8000a32:	d007      	beq.n	8000a44 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000a34:	689a      	ldr	r2, [r3, #8]
 8000a36:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000a3a:	2a08      	cmp	r2, #8
 8000a3c:	d111      	bne.n	8000a62 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	025e      	lsls	r6, r3, #9
 8000a42:	d40e      	bmi.n	8000a62 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a44:	4b77      	ldr	r3, [pc, #476]	; (8000c24 <HAL_RCC_OscConfig+0x2c8>)
 8000a46:	681a      	ldr	r2, [r3, #0]
 8000a48:	0795      	lsls	r5, r2, #30
 8000a4a:	d502      	bpl.n	8000a52 <HAL_RCC_OscConfig+0xf6>
 8000a4c:	68e2      	ldr	r2, [r4, #12]
 8000a4e:	2a01      	cmp	r2, #1
 8000a50:	d188      	bne.n	8000964 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a52:	681a      	ldr	r2, [r3, #0]
 8000a54:	6921      	ldr	r1, [r4, #16]
 8000a56:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000a5a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000a5e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a60:	e788      	b.n	8000974 <HAL_RCC_OscConfig+0x18>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000a62:	68e2      	ldr	r2, [r4, #12]
 8000a64:	4b70      	ldr	r3, [pc, #448]	; (8000c28 <HAL_RCC_OscConfig+0x2cc>)
 8000a66:	b1b2      	cbz	r2, 8000a96 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8000a68:	2201      	movs	r2, #1
 8000a6a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a6c:	f7ff fd86 	bl	800057c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a70:	4d6c      	ldr	r5, [pc, #432]	; (8000c24 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8000a72:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a74:	682b      	ldr	r3, [r5, #0]
 8000a76:	0798      	lsls	r0, r3, #30
 8000a78:	d507      	bpl.n	8000a8a <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a7a:	682b      	ldr	r3, [r5, #0]
 8000a7c:	6922      	ldr	r2, [r4, #16]
 8000a7e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000a82:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000a86:	602b      	str	r3, [r5, #0]
 8000a88:	e774      	b.n	8000974 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a8a:	f7ff fd77 	bl	800057c <HAL_GetTick>
 8000a8e:	1b80      	subs	r0, r0, r6
 8000a90:	2802      	cmp	r0, #2
 8000a92:	d9ef      	bls.n	8000a74 <HAL_RCC_OscConfig+0x118>
 8000a94:	e7a7      	b.n	80009e6 <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 8000a96:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a98:	f7ff fd70 	bl	800057c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a9c:	4d61      	ldr	r5, [pc, #388]	; (8000c24 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8000a9e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000aa0:	682b      	ldr	r3, [r5, #0]
 8000aa2:	0799      	lsls	r1, r3, #30
 8000aa4:	f57f af66 	bpl.w	8000974 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000aa8:	f7ff fd68 	bl	800057c <HAL_GetTick>
 8000aac:	1b80      	subs	r0, r0, r6
 8000aae:	2802      	cmp	r0, #2
 8000ab0:	d9f6      	bls.n	8000aa0 <HAL_RCC_OscConfig+0x144>
 8000ab2:	e798      	b.n	80009e6 <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000ab4:	6962      	ldr	r2, [r4, #20]
 8000ab6:	4b5d      	ldr	r3, [pc, #372]	; (8000c2c <HAL_RCC_OscConfig+0x2d0>)
 8000ab8:	b17a      	cbz	r2, 8000ada <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8000aba:	2201      	movs	r2, #1
 8000abc:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000abe:	f7ff fd5d 	bl	800057c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ac2:	4d58      	ldr	r5, [pc, #352]	; (8000c24 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000ac4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ac6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000ac8:	079f      	lsls	r7, r3, #30
 8000aca:	f53f af57 	bmi.w	800097c <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ace:	f7ff fd55 	bl	800057c <HAL_GetTick>
 8000ad2:	1b80      	subs	r0, r0, r6
 8000ad4:	2802      	cmp	r0, #2
 8000ad6:	d9f6      	bls.n	8000ac6 <HAL_RCC_OscConfig+0x16a>
 8000ad8:	e785      	b.n	80009e6 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 8000ada:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000adc:	f7ff fd4e 	bl	800057c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ae0:	4d50      	ldr	r5, [pc, #320]	; (8000c24 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000ae2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ae4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000ae6:	0798      	lsls	r0, r3, #30
 8000ae8:	f57f af48 	bpl.w	800097c <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000aec:	f7ff fd46 	bl	800057c <HAL_GetTick>
 8000af0:	1b80      	subs	r0, r0, r6
 8000af2:	2802      	cmp	r0, #2
 8000af4:	d9f6      	bls.n	8000ae4 <HAL_RCC_OscConfig+0x188>
 8000af6:	e776      	b.n	80009e6 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000af8:	4b4a      	ldr	r3, [pc, #296]	; (8000c24 <HAL_RCC_OscConfig+0x2c8>)
 8000afa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000afc:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000b00:	d128      	bne.n	8000b54 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000b02:	9201      	str	r2, [sp, #4]
 8000b04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b06:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000b0a:	641a      	str	r2, [r3, #64]	; 0x40
 8000b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b12:	9301      	str	r3, [sp, #4]
 8000b14:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000b16:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b18:	4d45      	ldr	r5, [pc, #276]	; (8000c30 <HAL_RCC_OscConfig+0x2d4>)
 8000b1a:	682b      	ldr	r3, [r5, #0]
 8000b1c:	05d9      	lsls	r1, r3, #23
 8000b1e:	d51b      	bpl.n	8000b58 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b20:	68a3      	ldr	r3, [r4, #8]
 8000b22:	4d40      	ldr	r5, [pc, #256]	; (8000c24 <HAL_RCC_OscConfig+0x2c8>)
 8000b24:	2b01      	cmp	r3, #1
 8000b26:	d127      	bne.n	8000b78 <HAL_RCC_OscConfig+0x21c>
 8000b28:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b2a:	f043 0301 	orr.w	r3, r3, #1
 8000b2e:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000b30:	f7ff fd24 	bl	800057c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b34:	4d3b      	ldr	r5, [pc, #236]	; (8000c24 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000b36:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b38:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b3c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b3e:	079b      	lsls	r3, r3, #30
 8000b40:	d539      	bpl.n	8000bb6 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8000b42:	2e00      	cmp	r6, #0
 8000b44:	f43f af1e 	beq.w	8000984 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b48:	4a36      	ldr	r2, [pc, #216]	; (8000c24 <HAL_RCC_OscConfig+0x2c8>)
 8000b4a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000b4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000b50:	6413      	str	r3, [r2, #64]	; 0x40
 8000b52:	e717      	b.n	8000984 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8000b54:	2600      	movs	r6, #0
 8000b56:	e7df      	b.n	8000b18 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000b58:	682b      	ldr	r3, [r5, #0]
 8000b5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b5e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000b60:	f7ff fd0c 	bl	800057c <HAL_GetTick>
 8000b64:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b66:	682b      	ldr	r3, [r5, #0]
 8000b68:	05da      	lsls	r2, r3, #23
 8000b6a:	d4d9      	bmi.n	8000b20 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000b6c:	f7ff fd06 	bl	800057c <HAL_GetTick>
 8000b70:	1bc0      	subs	r0, r0, r7
 8000b72:	2802      	cmp	r0, #2
 8000b74:	d9f7      	bls.n	8000b66 <HAL_RCC_OscConfig+0x20a>
 8000b76:	e736      	b.n	80009e6 <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b78:	2b05      	cmp	r3, #5
 8000b7a:	d104      	bne.n	8000b86 <HAL_RCC_OscConfig+0x22a>
 8000b7c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b7e:	f043 0304 	orr.w	r3, r3, #4
 8000b82:	672b      	str	r3, [r5, #112]	; 0x70
 8000b84:	e7d0      	b.n	8000b28 <HAL_RCC_OscConfig+0x1cc>
 8000b86:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000b88:	f022 0201 	bic.w	r2, r2, #1
 8000b8c:	672a      	str	r2, [r5, #112]	; 0x70
 8000b8e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000b90:	f022 0204 	bic.w	r2, r2, #4
 8000b94:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d1ca      	bne.n	8000b30 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8000b9a:	f7ff fcef 	bl	800057c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b9e:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000ba2:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ba4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000ba6:	0798      	lsls	r0, r3, #30
 8000ba8:	d5cb      	bpl.n	8000b42 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000baa:	f7ff fce7 	bl	800057c <HAL_GetTick>
 8000bae:	1bc0      	subs	r0, r0, r7
 8000bb0:	4540      	cmp	r0, r8
 8000bb2:	d9f7      	bls.n	8000ba4 <HAL_RCC_OscConfig+0x248>
 8000bb4:	e717      	b.n	80009e6 <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000bb6:	f7ff fce1 	bl	800057c <HAL_GetTick>
 8000bba:	1bc0      	subs	r0, r0, r7
 8000bbc:	4540      	cmp	r0, r8
 8000bbe:	d9bd      	bls.n	8000b3c <HAL_RCC_OscConfig+0x1e0>
 8000bc0:	e711      	b.n	80009e6 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000bc2:	4d18      	ldr	r5, [pc, #96]	; (8000c24 <HAL_RCC_OscConfig+0x2c8>)
 8000bc4:	68ab      	ldr	r3, [r5, #8]
 8000bc6:	f003 030c 	and.w	r3, r3, #12
 8000bca:	2b08      	cmp	r3, #8
 8000bcc:	d047      	beq.n	8000c5e <HAL_RCC_OscConfig+0x302>
 8000bce:	4e19      	ldr	r6, [pc, #100]	; (8000c34 <HAL_RCC_OscConfig+0x2d8>)
 8000bd0:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000bd2:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000bd4:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000bd6:	d135      	bne.n	8000c44 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8000bd8:	f7ff fcd0 	bl	800057c <HAL_GetTick>
 8000bdc:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000bde:	682b      	ldr	r3, [r5, #0]
 8000be0:	0199      	lsls	r1, r3, #6
 8000be2:	d429      	bmi.n	8000c38 <HAL_RCC_OscConfig+0x2dc>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000be4:	6a22      	ldr	r2, [r4, #32]
 8000be6:	69e3      	ldr	r3, [r4, #28]
 8000be8:	4313      	orrs	r3, r2
 8000bea:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000bec:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000bf0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000bf2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000bf6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000bf8:	4c0a      	ldr	r4, [pc, #40]	; (8000c24 <HAL_RCC_OscConfig+0x2c8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000bfa:	0852      	lsrs	r2, r2, #1
 8000bfc:	3a01      	subs	r2, #1
 8000bfe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c02:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000c04:	2301      	movs	r3, #1
 8000c06:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000c08:	f7ff fcb8 	bl	800057c <HAL_GetTick>
 8000c0c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c0e:	6823      	ldr	r3, [r4, #0]
 8000c10:	019a      	lsls	r2, r3, #6
 8000c12:	f53f aebb 	bmi.w	800098c <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c16:	f7ff fcb1 	bl	800057c <HAL_GetTick>
 8000c1a:	1b40      	subs	r0, r0, r5
 8000c1c:	2802      	cmp	r0, #2
 8000c1e:	d9f6      	bls.n	8000c0e <HAL_RCC_OscConfig+0x2b2>
 8000c20:	e6e1      	b.n	80009e6 <HAL_RCC_OscConfig+0x8a>
 8000c22:	bf00      	nop
 8000c24:	40023800 	.word	0x40023800
 8000c28:	42470000 	.word	0x42470000
 8000c2c:	42470e80 	.word	0x42470e80
 8000c30:	40007000 	.word	0x40007000
 8000c34:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c38:	f7ff fca0 	bl	800057c <HAL_GetTick>
 8000c3c:	1bc0      	subs	r0, r0, r7
 8000c3e:	2802      	cmp	r0, #2
 8000c40:	d9cd      	bls.n	8000bde <HAL_RCC_OscConfig+0x282>
 8000c42:	e6d0      	b.n	80009e6 <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 8000c44:	f7ff fc9a 	bl	800057c <HAL_GetTick>
 8000c48:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000c4a:	682b      	ldr	r3, [r5, #0]
 8000c4c:	019b      	lsls	r3, r3, #6
 8000c4e:	f57f ae9d 	bpl.w	800098c <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c52:	f7ff fc93 	bl	800057c <HAL_GetTick>
 8000c56:	1b00      	subs	r0, r0, r4
 8000c58:	2802      	cmp	r0, #2
 8000c5a:	d9f6      	bls.n	8000c4a <HAL_RCC_OscConfig+0x2ee>
 8000c5c:	e6c3      	b.n	80009e6 <HAL_RCC_OscConfig+0x8a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000c5e:	2801      	cmp	r0, #1
 8000c60:	f43f aec2 	beq.w	80009e8 <HAL_RCC_OscConfig+0x8c>
        pll_config = RCC->CFGR;
 8000c64:	68a8      	ldr	r0, [r5, #8]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c66:	69e3      	ldr	r3, [r4, #28]
 8000c68:	f400 0280 	and.w	r2, r0, #4194304	; 0x400000
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	f47f ae79 	bne.w	8000964 <HAL_RCC_OscConfig+0x8>
 8000c72:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000c74:	f000 033f 	and.w	r3, r0, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	f47f ae73 	bne.w	8000964 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000c7e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000c80:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000c84:	4003      	ands	r3, r0
 8000c86:	4293      	cmp	r3, r2
 8000c88:	f47f ae6c 	bne.w	8000964 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000c8c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000c8e:	f400 3340 	and.w	r3, r0, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000c92:	4293      	cmp	r3, r2
 8000c94:	f47f ae66 	bne.w	8000964 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000c98:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8000c9a:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
    return HAL_ERROR;
 8000c9e:	1ac0      	subs	r0, r0, r3
 8000ca0:	bf18      	it	ne
 8000ca2:	2001      	movne	r0, #1
 8000ca4:	e6a0      	b.n	80009e8 <HAL_RCC_OscConfig+0x8c>
 8000ca6:	bf00      	nop

08000ca8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000ca8:	4913      	ldr	r1, [pc, #76]	; (8000cf8 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000caa:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000cac:	688b      	ldr	r3, [r1, #8]
 8000cae:	f003 030c 	and.w	r3, r3, #12
 8000cb2:	2b04      	cmp	r3, #4
 8000cb4:	d003      	beq.n	8000cbe <HAL_RCC_GetSysClockFreq+0x16>
 8000cb6:	2b08      	cmp	r3, #8
 8000cb8:	d003      	beq.n	8000cc2 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000cba:	4810      	ldr	r0, [pc, #64]	; (8000cfc <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000cbc:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000cbe:	4810      	ldr	r0, [pc, #64]	; (8000d00 <HAL_RCC_GetSysClockFreq+0x58>)
 8000cc0:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000cc2:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000cc4:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000cc6:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000cc8:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ccc:	bf14      	ite	ne
 8000cce:	480c      	ldrne	r0, [pc, #48]	; (8000d00 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000cd0:	480a      	ldreq	r0, [pc, #40]	; (8000cfc <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000cd2:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000cd6:	bf18      	it	ne
 8000cd8:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000cda:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000cde:	fba1 0100 	umull	r0, r1, r1, r0
 8000ce2:	f7ff fa79 	bl	80001d8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000ce6:	4b04      	ldr	r3, [pc, #16]	; (8000cf8 <HAL_RCC_GetSysClockFreq+0x50>)
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000cee:	3301      	adds	r3, #1
 8000cf0:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000cf2:	fbb0 f0f3 	udiv	r0, r0, r3
 8000cf6:	bd08      	pop	{r3, pc}
 8000cf8:	40023800 	.word	0x40023800
 8000cfc:	00f42400 	.word	0x00f42400
 8000d00:	007a1200 	.word	0x007a1200

08000d04 <HAL_RCC_ClockConfig>:
{
 8000d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d08:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	b910      	cbnz	r0, 8000d14 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000d0e:	2001      	movs	r0, #1
 8000d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000d14:	4b44      	ldr	r3, [pc, #272]	; (8000e28 <HAL_RCC_ClockConfig+0x124>)
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	f002 020f 	and.w	r2, r2, #15
 8000d1c:	428a      	cmp	r2, r1
 8000d1e:	d329      	bcc.n	8000d74 <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000d20:	6821      	ldr	r1, [r4, #0]
 8000d22:	078f      	lsls	r7, r1, #30
 8000d24:	d42e      	bmi.n	8000d84 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d26:	07c8      	lsls	r0, r1, #31
 8000d28:	d441      	bmi.n	8000dae <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000d2a:	4b3f      	ldr	r3, [pc, #252]	; (8000e28 <HAL_RCC_ClockConfig+0x124>)
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	f002 020f 	and.w	r2, r2, #15
 8000d32:	4295      	cmp	r5, r2
 8000d34:	d367      	bcc.n	8000e06 <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d36:	6822      	ldr	r2, [r4, #0]
 8000d38:	0751      	lsls	r1, r2, #29
 8000d3a:	d46d      	bmi.n	8000e18 <HAL_RCC_ClockConfig+0x114>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d3c:	0713      	lsls	r3, r2, #28
 8000d3e:	d507      	bpl.n	8000d50 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000d40:	4a3a      	ldr	r2, [pc, #232]	; (8000e2c <HAL_RCC_ClockConfig+0x128>)
 8000d42:	6921      	ldr	r1, [r4, #16]
 8000d44:	6893      	ldr	r3, [r2, #8]
 8000d46:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000d4a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000d4e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000d50:	f7ff ffaa 	bl	8000ca8 <HAL_RCC_GetSysClockFreq>
 8000d54:	4b35      	ldr	r3, [pc, #212]	; (8000e2c <HAL_RCC_ClockConfig+0x128>)
 8000d56:	4a36      	ldr	r2, [pc, #216]	; (8000e30 <HAL_RCC_ClockConfig+0x12c>)
 8000d58:	689b      	ldr	r3, [r3, #8]
 8000d5a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000d5e:	5cd3      	ldrb	r3, [r2, r3]
 8000d60:	40d8      	lsrs	r0, r3
 8000d62:	4b34      	ldr	r3, [pc, #208]	; (8000e34 <HAL_RCC_ClockConfig+0x130>)
 8000d64:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8000d66:	4b34      	ldr	r3, [pc, #208]	; (8000e38 <HAL_RCC_ClockConfig+0x134>)
 8000d68:	6818      	ldr	r0, [r3, #0]
 8000d6a:	f7ff fbbd 	bl	80004e8 <HAL_InitTick>
  return HAL_OK;
 8000d6e:	2000      	movs	r0, #0
 8000d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d74:	b2ca      	uxtb	r2, r1
 8000d76:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f003 030f 	and.w	r3, r3, #15
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d1c5      	bne.n	8000d0e <HAL_RCC_ClockConfig+0xa>
 8000d82:	e7cd      	b.n	8000d20 <HAL_RCC_ClockConfig+0x1c>
 8000d84:	4b29      	ldr	r3, [pc, #164]	; (8000e2c <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d86:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000d8a:	bf1e      	ittt	ne
 8000d8c:	689a      	ldrne	r2, [r3, #8]
 8000d8e:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000d92:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d94:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000d96:	bf42      	ittt	mi
 8000d98:	689a      	ldrmi	r2, [r3, #8]
 8000d9a:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000d9e:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000da0:	689a      	ldr	r2, [r3, #8]
 8000da2:	68a0      	ldr	r0, [r4, #8]
 8000da4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000da8:	4302      	orrs	r2, r0
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	e7bb      	b.n	8000d26 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000dae:	6862      	ldr	r2, [r4, #4]
 8000db0:	4b1e      	ldr	r3, [pc, #120]	; (8000e2c <HAL_RCC_ClockConfig+0x128>)
 8000db2:	2a01      	cmp	r2, #1
 8000db4:	d11d      	bne.n	8000df2 <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dbc:	d0a7      	beq.n	8000d0e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000dbe:	4e1b      	ldr	r6, [pc, #108]	; (8000e2c <HAL_RCC_ClockConfig+0x128>)
 8000dc0:	68b3      	ldr	r3, [r6, #8]
 8000dc2:	f023 0303 	bic.w	r3, r3, #3
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000dca:	f7ff fbd7 	bl	800057c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000dce:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000dd2:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000dd4:	68b3      	ldr	r3, [r6, #8]
 8000dd6:	6862      	ldr	r2, [r4, #4]
 8000dd8:	f003 030c 	and.w	r3, r3, #12
 8000ddc:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000de0:	d0a3      	beq.n	8000d2a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000de2:	f7ff fbcb 	bl	800057c <HAL_GetTick>
 8000de6:	1bc0      	subs	r0, r0, r7
 8000de8:	4540      	cmp	r0, r8
 8000dea:	d9f3      	bls.n	8000dd4 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8000dec:	2003      	movs	r0, #3
}
 8000dee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000df2:	1e91      	subs	r1, r2, #2
 8000df4:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000df6:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000df8:	d802      	bhi.n	8000e00 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000dfa:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000dfe:	e7dd      	b.n	8000dbc <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e00:	f013 0f02 	tst.w	r3, #2
 8000e04:	e7da      	b.n	8000dbc <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e06:	b2ea      	uxtb	r2, r5
 8000e08:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f003 030f 	and.w	r3, r3, #15
 8000e10:	429d      	cmp	r5, r3
 8000e12:	f47f af7c 	bne.w	8000d0e <HAL_RCC_ClockConfig+0xa>
 8000e16:	e78e      	b.n	8000d36 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000e18:	4904      	ldr	r1, [pc, #16]	; (8000e2c <HAL_RCC_ClockConfig+0x128>)
 8000e1a:	68e0      	ldr	r0, [r4, #12]
 8000e1c:	688b      	ldr	r3, [r1, #8]
 8000e1e:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000e22:	4303      	orrs	r3, r0
 8000e24:	608b      	str	r3, [r1, #8]
 8000e26:	e789      	b.n	8000d3c <HAL_RCC_ClockConfig+0x38>
 8000e28:	40023c00 	.word	0x40023c00
 8000e2c:	40023800 	.word	0x40023800
 8000e30:	080026c6 	.word	0x080026c6
 8000e34:	20000018 	.word	0x20000018
 8000e38:	20000004 	.word	0x20000004

08000e3c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000e3c:	4b04      	ldr	r3, [pc, #16]	; (8000e50 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000e3e:	4a05      	ldr	r2, [pc, #20]	; (8000e54 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000e40:	689b      	ldr	r3, [r3, #8]
 8000e42:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000e46:	5cd3      	ldrb	r3, [r2, r3]
 8000e48:	4a03      	ldr	r2, [pc, #12]	; (8000e58 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000e4a:	6810      	ldr	r0, [r2, #0]
}
 8000e4c:	40d8      	lsrs	r0, r3
 8000e4e:	4770      	bx	lr
 8000e50:	40023800 	.word	0x40023800
 8000e54:	080026d6 	.word	0x080026d6
 8000e58:	20000018 	.word	0x20000018

08000e5c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000e5c:	4b04      	ldr	r3, [pc, #16]	; (8000e70 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000e5e:	4a05      	ldr	r2, [pc, #20]	; (8000e74 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000e60:	689b      	ldr	r3, [r3, #8]
 8000e62:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000e66:	5cd3      	ldrb	r3, [r2, r3]
 8000e68:	4a03      	ldr	r2, [pc, #12]	; (8000e78 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000e6a:	6810      	ldr	r0, [r2, #0]
}
 8000e6c:	40d8      	lsrs	r0, r3
 8000e6e:	4770      	bx	lr
 8000e70:	40023800 	.word	0x40023800
 8000e74:	080026d6 	.word	0x080026d6
 8000e78:	20000018 	.word	0x20000018

08000e7c <SPI_WaitFlagStateUntilTimeout.constprop.9>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8000e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e7e:	4604      	mov	r4, r0
 8000e80:	460e      	mov	r6, r1
 8000e82:	4615      	mov	r5, r2
 8000e84:	461f      	mov	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8000e86:	6821      	ldr	r1, [r4, #0]
 8000e88:	688a      	ldr	r2, [r1, #8]
 8000e8a:	ea36 0302 	bics.w	r3, r6, r2
 8000e8e:	d001      	beq.n	8000e94 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x18>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8000e90:	2000      	movs	r0, #0
}
 8000e92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000e94:	1c6b      	adds	r3, r5, #1
 8000e96:	d0f7      	beq.n	8000e88 <SPI_WaitFlagStateUntilTimeout.constprop.9+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8000e98:	f7ff fb70 	bl	800057c <HAL_GetTick>
 8000e9c:	1bc0      	subs	r0, r0, r7
 8000e9e:	4285      	cmp	r5, r0
 8000ea0:	d8f1      	bhi.n	8000e86 <SPI_WaitFlagStateUntilTimeout.constprop.9+0xa>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8000ea2:	6823      	ldr	r3, [r4, #0]
 8000ea4:	685a      	ldr	r2, [r3, #4]
 8000ea6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8000eaa:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000eac:	6862      	ldr	r2, [r4, #4]
 8000eae:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8000eb2:	d10a      	bne.n	8000eca <SPI_WaitFlagStateUntilTimeout.constprop.9+0x4e>
 8000eb4:	68a2      	ldr	r2, [r4, #8]
 8000eb6:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8000eba:	d002      	beq.n	8000ec2 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x46>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000ebc:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8000ec0:	d103      	bne.n	8000eca <SPI_WaitFlagStateUntilTimeout.constprop.9+0x4e>
          __HAL_SPI_DISABLE(hspi);
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000ec8:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000eca:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000ecc:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000ed0:	d107      	bne.n	8000ee2 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x66>
          SPI_RESET_CRC(hspi);
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000ee0:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8000ee8:	2300      	movs	r3, #0
 8000eea:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8000eee:	2003      	movs	r0, #3
 8000ef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000ef4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8000ef4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000ef6:	4613      	mov	r3, r2
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8000ef8:	4a13      	ldr	r2, [pc, #76]	; (8000f48 <SPI_EndRxTxTransaction+0x54>)
 8000efa:	4e14      	ldr	r6, [pc, #80]	; (8000f4c <SPI_EndRxTxTransaction+0x58>)
 8000efc:	6815      	ldr	r5, [r2, #0]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8000efe:	6842      	ldr	r2, [r0, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8000f00:	fbb5 f6f6 	udiv	r6, r5, r6
 8000f04:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8000f08:	4375      	muls	r5, r6
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8000f0a:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 8000f0e:	4604      	mov	r4, r0
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8000f10:	9501      	str	r5, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8000f12:	d10d      	bne.n	8000f30 <SPI_EndRxTxTransaction+0x3c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000f14:	460a      	mov	r2, r1
 8000f16:	2180      	movs	r1, #128	; 0x80
 8000f18:	f7ff ffb0 	bl	8000e7c <SPI_WaitFlagStateUntilTimeout.constprop.9>
 8000f1c:	b910      	cbnz	r0, 8000f24 <SPI_EndRxTxTransaction+0x30>
      }
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
  }

  return HAL_OK;
 8000f1e:	2000      	movs	r0, #0
}
 8000f20:	b002      	add	sp, #8
 8000f22:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000f24:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000f26:	f043 0320 	orr.w	r3, r3, #32
 8000f2a:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8000f2c:	2003      	movs	r0, #3
 8000f2e:	e7f7      	b.n	8000f20 <SPI_EndRxTxTransaction+0x2c>
      if (count == 0U)
 8000f30:	9b01      	ldr	r3, [sp, #4]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d0f3      	beq.n	8000f1e <SPI_EndRxTxTransaction+0x2a>
      count--;
 8000f36:	9b01      	ldr	r3, [sp, #4]
 8000f38:	3b01      	subs	r3, #1
 8000f3a:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8000f3c:	6823      	ldr	r3, [r4, #0]
 8000f3e:	689b      	ldr	r3, [r3, #8]
 8000f40:	061b      	lsls	r3, r3, #24
 8000f42:	d4f5      	bmi.n	8000f30 <SPI_EndRxTxTransaction+0x3c>
 8000f44:	e7eb      	b.n	8000f1e <SPI_EndRxTxTransaction+0x2a>
 8000f46:	bf00      	nop
 8000f48:	20000018 	.word	0x20000018
 8000f4c:	016e3600 	.word	0x016e3600

08000f50 <HAL_SPI_MspInit>:
 8000f50:	4770      	bx	lr

08000f52 <HAL_SPI_Init>:
{
 8000f52:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8000f54:	4604      	mov	r4, r0
 8000f56:	2800      	cmp	r0, #0
 8000f58:	d036      	beq.n	8000fc8 <HAL_SPI_Init+0x76>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8000f5e:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8000f62:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000f66:	b91b      	cbnz	r3, 8000f70 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8000f68:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8000f6c:	f7ff fff0 	bl	8000f50 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8000f70:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000f72:	68a0      	ldr	r0, [r4, #8]
 8000f74:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8000f76:	2302      	movs	r3, #2
 8000f78:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8000f7c:	680b      	ldr	r3, [r1, #0]
 8000f7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000f82:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000f84:	6863      	ldr	r3, [r4, #4]
 8000f86:	4303      	orrs	r3, r0
 8000f88:	68e0      	ldr	r0, [r4, #12]
 8000f8a:	4303      	orrs	r3, r0
 8000f8c:	6920      	ldr	r0, [r4, #16]
 8000f8e:	4303      	orrs	r3, r0
 8000f90:	6960      	ldr	r0, [r4, #20]
 8000f92:	4303      	orrs	r3, r0
 8000f94:	69e0      	ldr	r0, [r4, #28]
 8000f96:	4303      	orrs	r3, r0
 8000f98:	6a20      	ldr	r0, [r4, #32]
 8000f9a:	4303      	orrs	r3, r0
 8000f9c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000f9e:	4303      	orrs	r3, r0
 8000fa0:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8000fa4:	4303      	orrs	r3, r0
 8000fa6:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8000fa8:	0c12      	lsrs	r2, r2, #16
 8000faa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000fac:	f002 0204 	and.w	r2, r2, #4
 8000fb0:	431a      	orrs	r2, r3
 8000fb2:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000fb4:	69cb      	ldr	r3, [r1, #28]
 8000fb6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000fba:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000fbc:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8000fbe:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000fc0:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8000fc2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  return HAL_OK;
 8000fc6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000fc8:	2001      	movs	r0, #1
}
 8000fca:	bd10      	pop	{r4, pc}

08000fcc <HAL_SPI_TransmitReceive>:
{
 8000fcc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8000fd0:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8000fd2:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8000fd6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8000fd8:	2b01      	cmp	r3, #1
{
 8000fda:	4604      	mov	r4, r0
 8000fdc:	460d      	mov	r5, r1
 8000fde:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 8000fe0:	f000 80e2 	beq.w	80011a8 <HAL_SPI_TransmitReceive+0x1dc>
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8000fea:	f7ff fac7 	bl	800057c <HAL_GetTick>
  tmp_state           = hspi->State;
 8000fee:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tmp_mode            = hspi->Init.Mode;
 8000ff2:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 8000ff4:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8000ff6:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8000ff8:	4680      	mov	r8, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8000ffa:	d00a      	beq.n	8001012 <HAL_SPI_TransmitReceive+0x46>
 8000ffc:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8001000:	f040 80d0 	bne.w	80011a4 <HAL_SPI_TransmitReceive+0x1d8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001004:	68a0      	ldr	r0, [r4, #8]
 8001006:	2800      	cmp	r0, #0
 8001008:	f040 80cc 	bne.w	80011a4 <HAL_SPI_TransmitReceive+0x1d8>
 800100c:	2b04      	cmp	r3, #4
 800100e:	f040 80c9 	bne.w	80011a4 <HAL_SPI_TransmitReceive+0x1d8>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001012:	2d00      	cmp	r5, #0
 8001014:	f000 80c4 	beq.w	80011a0 <HAL_SPI_TransmitReceive+0x1d4>
 8001018:	f1b9 0f00 	cmp.w	r9, #0
 800101c:	f000 80c0 	beq.w	80011a0 <HAL_SPI_TransmitReceive+0x1d4>
 8001020:	2e00      	cmp	r6, #0
 8001022:	f000 80bd 	beq.w	80011a0 <HAL_SPI_TransmitReceive+0x1d4>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001026:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800102a:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800102e:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001030:	bf1c      	itt	ne
 8001032:	2305      	movne	r3, #5
 8001034:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001038:	2300      	movs	r3, #0
 800103a:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 800103c:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 800103e:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001040:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8001042:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8001044:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001046:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 8001048:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800104a:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 800104c:	bf58      	it	pl
 800104e:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001050:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 8001052:	bf58      	it	pl
 8001054:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 8001058:	86a6      	strh	r6, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 800105a:	bf58      	it	pl
 800105c:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800105e:	68e2      	ldr	r2, [r4, #12]
 8001060:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8001064:	d158      	bne.n	8001118 <HAL_SPI_TransmitReceive+0x14c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001066:	b109      	cbz	r1, 800106c <HAL_SPI_TransmitReceive+0xa0>
 8001068:	2e01      	cmp	r6, #1
 800106a:	d107      	bne.n	800107c <HAL_SPI_TransmitReceive+0xb0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800106c:	f835 2b02 	ldrh.w	r2, [r5], #2
 8001070:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8001072:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001074:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8001076:	3b01      	subs	r3, #1
 8001078:	b29b      	uxth	r3, r3
 800107a:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 800107c:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800107e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001080:	b29b      	uxth	r3, r3
 8001082:	b9ab      	cbnz	r3, 80010b0 <HAL_SPI_TransmitReceive+0xe4>
 8001084:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001086:	b29b      	uxth	r3, r3
 8001088:	b993      	cbnz	r3, 80010b0 <HAL_SPI_TransmitReceive+0xe4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800108a:	4642      	mov	r2, r8
 800108c:	4639      	mov	r1, r7
 800108e:	4620      	mov	r0, r4
 8001090:	f7ff ff30 	bl	8000ef4 <SPI_EndRxTxTransaction>
 8001094:	2800      	cmp	r0, #0
 8001096:	f040 8081 	bne.w	800119c <HAL_SPI_TransmitReceive+0x1d0>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800109a:	68a3      	ldr	r3, [r4, #8]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d132      	bne.n	8001106 <HAL_SPI_TransmitReceive+0x13a>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80010a0:	6823      	ldr	r3, [r4, #0]
 80010a2:	9001      	str	r0, [sp, #4]
 80010a4:	68da      	ldr	r2, [r3, #12]
 80010a6:	9201      	str	r2, [sp, #4]
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	9301      	str	r3, [sp, #4]
 80010ac:	9b01      	ldr	r3, [sp, #4]
 80010ae:	e02a      	b.n	8001106 <HAL_SPI_TransmitReceive+0x13a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80010b0:	6822      	ldr	r2, [r4, #0]
 80010b2:	6893      	ldr	r3, [r2, #8]
 80010b4:	0799      	lsls	r1, r3, #30
 80010b6:	d50d      	bpl.n	80010d4 <HAL_SPI_TransmitReceive+0x108>
 80010b8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80010ba:	b29b      	uxth	r3, r3
 80010bc:	b153      	cbz	r3, 80010d4 <HAL_SPI_TransmitReceive+0x108>
 80010be:	b14d      	cbz	r5, 80010d4 <HAL_SPI_TransmitReceive+0x108>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80010c0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80010c2:	f833 1b02 	ldrh.w	r1, [r3], #2
 80010c6:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80010c8:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80010ca:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80010cc:	3b01      	subs	r3, #1
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 80010d2:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80010d4:	6893      	ldr	r3, [r2, #8]
 80010d6:	07db      	lsls	r3, r3, #31
 80010d8:	d50c      	bpl.n	80010f4 <HAL_SPI_TransmitReceive+0x128>
 80010da:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80010dc:	b29b      	uxth	r3, r3
 80010de:	b14b      	cbz	r3, 80010f4 <HAL_SPI_TransmitReceive+0x128>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80010e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80010e2:	68d2      	ldr	r2, [r2, #12]
 80010e4:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80010e8:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80010ea:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80010ec:	3b01      	subs	r3, #1
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80010f2:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80010f4:	f7ff fa42 	bl	800057c <HAL_GetTick>
 80010f8:	eba0 0008 	sub.w	r0, r0, r8
 80010fc:	4287      	cmp	r7, r0
 80010fe:	d8be      	bhi.n	800107e <HAL_SPI_TransmitReceive+0xb2>
 8001100:	1c7e      	adds	r6, r7, #1
 8001102:	d0bc      	beq.n	800107e <HAL_SPI_TransmitReceive+0xb2>
        errorcode = HAL_TIMEOUT;
 8001104:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8001106:	2301      	movs	r3, #1
 8001108:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800110c:	2300      	movs	r3, #0
 800110e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8001112:	b003      	add	sp, #12
 8001114:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001118:	b109      	cbz	r1, 800111e <HAL_SPI_TransmitReceive+0x152>
 800111a:	2e01      	cmp	r6, #1
 800111c:	d108      	bne.n	8001130 <HAL_SPI_TransmitReceive+0x164>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800111e:	782a      	ldrb	r2, [r5, #0]
 8001120:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001122:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001124:	3301      	adds	r3, #1
 8001126:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8001128:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800112a:	3b01      	subs	r3, #1
 800112c:	b29b      	uxth	r3, r3
 800112e:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8001130:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001132:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001134:	b29b      	uxth	r3, r3
 8001136:	b91b      	cbnz	r3, 8001140 <HAL_SPI_TransmitReceive+0x174>
 8001138:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800113a:	b29b      	uxth	r3, r3
 800113c:	2b00      	cmp	r3, #0
 800113e:	d0a4      	beq.n	800108a <HAL_SPI_TransmitReceive+0xbe>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001140:	6822      	ldr	r2, [r4, #0]
 8001142:	6893      	ldr	r3, [r2, #8]
 8001144:	0798      	lsls	r0, r3, #30
 8001146:	d50e      	bpl.n	8001166 <HAL_SPI_TransmitReceive+0x19a>
 8001148:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800114a:	b29b      	uxth	r3, r3
 800114c:	b15b      	cbz	r3, 8001166 <HAL_SPI_TransmitReceive+0x19a>
 800114e:	b155      	cbz	r5, 8001166 <HAL_SPI_TransmitReceive+0x19a>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001150:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 8001156:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001158:	3301      	adds	r3, #1
 800115a:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800115c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800115e:	3b01      	subs	r3, #1
 8001160:	b29b      	uxth	r3, r3
 8001162:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8001164:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001166:	6822      	ldr	r2, [r4, #0]
 8001168:	6893      	ldr	r3, [r2, #8]
 800116a:	07d9      	lsls	r1, r3, #31
 800116c:	d50d      	bpl.n	800118a <HAL_SPI_TransmitReceive+0x1be>
 800116e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001170:	b29b      	uxth	r3, r3
 8001172:	b153      	cbz	r3, 800118a <HAL_SPI_TransmitReceive+0x1be>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001174:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001176:	68d2      	ldr	r2, [r2, #12]
 8001178:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800117a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800117c:	3301      	adds	r3, #1
 800117e:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8001180:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001182:	3b01      	subs	r3, #1
 8001184:	b29b      	uxth	r3, r3
 8001186:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8001188:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800118a:	f7ff f9f7 	bl	800057c <HAL_GetTick>
 800118e:	eba0 0008 	sub.w	r0, r0, r8
 8001192:	4287      	cmp	r7, r0
 8001194:	d8cd      	bhi.n	8001132 <HAL_SPI_TransmitReceive+0x166>
 8001196:	1c7b      	adds	r3, r7, #1
 8001198:	d0cb      	beq.n	8001132 <HAL_SPI_TransmitReceive+0x166>
 800119a:	e7b3      	b.n	8001104 <HAL_SPI_TransmitReceive+0x138>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800119c:	2320      	movs	r3, #32
 800119e:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 80011a0:	2001      	movs	r0, #1
 80011a2:	e7b0      	b.n	8001106 <HAL_SPI_TransmitReceive+0x13a>
    errorcode = HAL_BUSY;
 80011a4:	2002      	movs	r0, #2
 80011a6:	e7ae      	b.n	8001106 <HAL_SPI_TransmitReceive+0x13a>
  __HAL_LOCK(hspi);
 80011a8:	2002      	movs	r0, #2
 80011aa:	e7b2      	b.n	8001112 <HAL_SPI_TransmitReceive+0x146>

080011ac <HAL_SPI_GetState>:
  return hspi->State;
 80011ac:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
}
 80011b0:	4770      	bx	lr
	...

080011b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80011b4:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80011b6:	6803      	ldr	r3, [r0, #0]
 80011b8:	68c1      	ldr	r1, [r0, #12]
 80011ba:	691a      	ldr	r2, [r3, #16]
{
 80011bc:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80011be:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80011c2:	430a      	orrs	r2, r1
 80011c4:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80011c6:	6925      	ldr	r5, [r4, #16]
 80011c8:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1,
 80011ca:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80011cc:	69c0      	ldr	r0, [r0, #28]
 80011ce:	432a      	orrs	r2, r5
 80011d0:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 80011d2:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80011d6:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 80011d8:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80011dc:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80011de:	430a      	orrs	r2, r1
 80011e0:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80011e2:	695a      	ldr	r2, [r3, #20]
 80011e4:	69a1      	ldr	r1, [r4, #24]
 80011e6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80011ea:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80011ec:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80011f0:	615a      	str	r2, [r3, #20]
 80011f2:	4a25      	ldr	r2, [pc, #148]	; (8001288 <UART_SetConfig+0xd4>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80011f4:	d129      	bne.n	800124a <UART_SetConfig+0x96>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d003      	beq.n	8001202 <UART_SetConfig+0x4e>
 80011fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011fe:	4293      	cmp	r3, r2
 8001200:	d120      	bne.n	8001244 <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001202:	f7ff fe2b 	bl	8000e5c <HAL_RCC_GetPCLK2Freq>
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001206:	6862      	ldr	r2, [r4, #4]
 8001208:	6825      	ldr	r5, [r4, #0]
 800120a:	1892      	adds	r2, r2, r2
 800120c:	f04f 0300 	mov.w	r3, #0
 8001210:	f04f 0119 	mov.w	r1, #25
 8001214:	415b      	adcs	r3, r3
 8001216:	fba0 0101 	umull	r0, r1, r0, r1
 800121a:	f7fe ffdd 	bl	80001d8 <__aeabi_uldivmod>
 800121e:	2164      	movs	r1, #100	; 0x64
 8001220:	fbb0 f4f1 	udiv	r4, r0, r1
 8001224:	fb01 0314 	mls	r3, r1, r4, r0
 8001228:	00db      	lsls	r3, r3, #3
 800122a:	3332      	adds	r3, #50	; 0x32
 800122c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001230:	f003 0207 	and.w	r2, r3, #7
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 800123a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800123e:	4413      	add	r3, r2
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001240:	60ab      	str	r3, [r5, #8]
 8001242:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8001244:	f7ff fdfa 	bl	8000e3c <HAL_RCC_GetPCLK1Freq>
 8001248:	e7dd      	b.n	8001206 <UART_SetConfig+0x52>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800124a:	4293      	cmp	r3, r2
 800124c:	d002      	beq.n	8001254 <UART_SetConfig+0xa0>
 800124e:	4a0f      	ldr	r2, [pc, #60]	; (800128c <UART_SetConfig+0xd8>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d116      	bne.n	8001282 <UART_SetConfig+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
 8001254:	f7ff fe02 	bl	8000e5c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001258:	6863      	ldr	r3, [r4, #4]
 800125a:	6825      	ldr	r5, [r4, #0]
 800125c:	2119      	movs	r1, #25
 800125e:	009a      	lsls	r2, r3, #2
 8001260:	fba0 0101 	umull	r0, r1, r0, r1
 8001264:	0f9b      	lsrs	r3, r3, #30
 8001266:	f7fe ffb7 	bl	80001d8 <__aeabi_uldivmod>
 800126a:	2264      	movs	r2, #100	; 0x64
 800126c:	fbb0 f1f2 	udiv	r1, r0, r2
 8001270:	fb02 0311 	mls	r3, r2, r1, r0
 8001274:	011b      	lsls	r3, r3, #4
 8001276:	3332      	adds	r3, #50	; 0x32
 8001278:	fbb3 f3f2 	udiv	r3, r3, r2
 800127c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8001280:	e7de      	b.n	8001240 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK1Freq();
 8001282:	f7ff fddb 	bl	8000e3c <HAL_RCC_GetPCLK1Freq>
 8001286:	e7e7      	b.n	8001258 <UART_SetConfig+0xa4>
 8001288:	40011000 	.word	0x40011000
 800128c:	40011400 	.word	0x40011400

08001290 <HAL_UART_Init>:
{
 8001290:	b510      	push	{r4, lr}
  if (huart == NULL)
 8001292:	4604      	mov	r4, r0
 8001294:	b340      	cbz	r0, 80012e8 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001296:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800129a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800129e:	b91b      	cbnz	r3, 80012a8 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80012a0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80012a4:	f001 f930 	bl	8002508 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80012a8:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80012aa:	2324      	movs	r3, #36	; 0x24
 80012ac:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80012b0:	68d3      	ldr	r3, [r2, #12]
 80012b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80012b6:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80012b8:	4620      	mov	r0, r4
 80012ba:	f7ff ff7b 	bl	80011b4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80012be:	6823      	ldr	r3, [r4, #0]
 80012c0:	691a      	ldr	r2, [r3, #16]
 80012c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80012c6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80012c8:	695a      	ldr	r2, [r3, #20]
 80012ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80012ce:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80012d0:	68da      	ldr	r2, [r3, #12]
 80012d2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80012d6:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80012d8:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80012da:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80012dc:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80012de:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80012e2:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80012e6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80012e8:	2001      	movs	r0, #1
}
 80012ea:	bd10      	pop	{r4, pc}

080012ec <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 80012ec:	b570      	push	{r4, r5, r6, lr}
 80012ee:	b08a      	sub	sp, #40	; 0x28
 
  cp.role = role;
  cp.privacy_enabled = privacy_enabled;
  cp.device_name_char_len = device_name_char_len;
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80012f0:	2400      	movs	r4, #0
  cp.role = role;
 80012f2:	f88d 0004 	strb.w	r0, [sp, #4]
  cp.privacy_enabled = privacy_enabled;
 80012f6:	f88d 1005 	strb.w	r1, [sp, #5]
  cp.device_name_char_len = device_name_char_len;
 80012fa:	f88d 2006 	strb.w	r2, [sp, #6]
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80012fe:	4621      	mov	r1, r4
 8001300:	2218      	movs	r2, #24
 8001302:	a804      	add	r0, sp, #16
{
 8001304:	461e      	mov	r6, r3
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8001306:	9402      	str	r4, [sp, #8]
 8001308:	f8cd 400b 	str.w	r4, [sp, #11]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800130c:	f001 f98d 	bl	800262a <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8001310:	233f      	movs	r3, #63	; 0x3f
 8001312:	f8ad 3010 	strh.w	r3, [sp, #16]
  rq.ocf = OCF_GAP_INIT;
 8001316:	238a      	movs	r3, #138	; 0x8a
 8001318:	f8ad 3012 	strh.w	r3, [sp, #18]
  rq.cparam = &cp;
 800131c:	ab01      	add	r3, sp, #4
 800131e:	9306      	str	r3, [sp, #24]
  rq.clen = sizeof(cp);
 8001320:	2303      	movs	r3, #3
 8001322:	9307      	str	r3, [sp, #28]
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8001324:	ad02      	add	r5, sp, #8
  rq.rparam = &resp;
  rq.rlen = GAP_INIT_RP_SIZE;
 8001326:	2307      	movs	r3, #7
  
  if (hci_send_req(&rq, FALSE) < 0)
 8001328:	4621      	mov	r1, r4
 800132a:	a804      	add	r0, sp, #16
  rq.rparam = &resp;
 800132c:	9508      	str	r5, [sp, #32]
  rq.rlen = GAP_INIT_RP_SIZE;
 800132e:	9309      	str	r3, [sp, #36]	; 0x24
  if (hci_send_req(&rq, FALSE) < 0)
 8001330:	f000 fade 	bl	80018f0 <hci_send_req>
 8001334:	42a0      	cmp	r0, r4
 8001336:	db15      	blt.n	8001364 <aci_gap_init_IDB05A1+0x78>
    return BLE_STATUS_TIMEOUT;
  
  if (resp.status) {
 8001338:	f89d 0008 	ldrb.w	r0, [sp, #8]
 800133c:	b980      	cbnz	r0, 8001360 <aci_gap_init_IDB05A1+0x74>
    return resp.status;
  }
  
  *service_handle = btohs(resp.service_handle);
 800133e:	9a02      	ldr	r2, [sp, #8]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8001340:	f89d 300b 	ldrb.w	r3, [sp, #11]
  *service_handle = btohs(resp.service_handle);
 8001344:	f3c2 220f 	ubfx	r2, r2, #8, #16
 8001348:	8032      	strh	r2, [r6, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 800134a:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800134e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001352:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001354:	8013      	strh	r3, [r2, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8001356:	9b03      	ldr	r3, [sp, #12]
 8001358:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800135a:	f3c3 230f 	ubfx	r3, r3, #8, #16
 800135e:	8013      	strh	r3, [r2, #0]
  
  return 0;
}
 8001360:	b00a      	add	sp, #40	; 0x28
 8001362:	bd70      	pop	{r4, r5, r6, pc}
    return BLE_STATUS_TIMEOUT;
 8001364:	20ff      	movs	r0, #255	; 0xff
 8001366:	e7fb      	b.n	8001360 <aci_gap_init_IDB05A1+0x74>

08001368 <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 8001368:	b570      	push	{r4, r5, r6, lr}
 800136a:	b092      	sub	sp, #72	; 0x48
 800136c:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8001370:	f89d 4064 	ldrb.w	r4, [sp, #100]	; 0x64
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 8001374:	192e      	adds	r6, r5, r4
 8001376:	2e1a      	cmp	r6, #26
 8001378:	dc4f      	bgt.n	800141a <aci_gap_set_discoverable+0xb2>
    return BLE_STATUS_INVALID_PARAMS;

  buffer[indx] = AdvType;
 800137a:	f88d 0020 	strb.w	r0, [sp, #32]
  indx++;
  
  AdvIntervMin = htobs(AdvIntervMin);
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 800137e:	f8ad 1021 	strh.w	r1, [sp, #33]	; 0x21
  indx +=  2;
    
  AdvIntervMax = htobs(AdvIntervMax);
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 8001382:	f8ad 2023 	strh.w	r2, [sp, #35]	; 0x23
  indx +=  2;
    
  buffer[indx] = OwnAddrType;
 8001386:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  indx++;
    
  buffer[indx] = LocalNameLen;
  indx++;
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 800138a:	462a      	mov	r2, r5
  buffer[indx] = AdvFilterPolicy;
 800138c:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 8001390:	9918      	ldr	r1, [sp, #96]	; 0x60
  buffer[indx] = AdvFilterPolicy;
 8001392:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 8001396:	a80a      	add	r0, sp, #40	; 0x28
  buffer[indx] = LocalNameLen;
 8001398:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 800139c:	f001 f93a 	bl	8002614 <memcpy>
  indx +=  LocalNameLen;
 80013a0:	f105 0308 	add.w	r3, r5, #8
  
  buffer[indx] = ServiceUUIDLen;
 80013a4:	aa12      	add	r2, sp, #72	; 0x48
 80013a6:	fa52 f383 	uxtab	r3, r2, r3
  indx++;
 80013aa:	3509      	adds	r5, #9
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 80013ac:	ae08      	add	r6, sp, #32
  indx++;
 80013ae:	b2ed      	uxtb	r5, r5
  buffer[indx] = ServiceUUIDLen;
 80013b0:	f803 4c28 	strb.w	r4, [r3, #-40]

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 80013b4:	4622      	mov	r2, r4
 80013b6:	991a      	ldr	r1, [sp, #104]	; 0x68
 80013b8:	1970      	adds	r0, r6, r5
  indx +=  ServiceUUIDLen;  
 80013ba:	442c      	add	r4, r5
  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 80013bc:	f001 f92a 	bl	8002614 <memcpy>
  indx +=  ServiceUUIDLen;  
 80013c0:	b2e4      	uxtb	r4, r4

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 80013c2:	ab12      	add	r3, sp, #72	; 0x48
 80013c4:	4423      	add	r3, r4
 80013c6:	f8bd 206c 	ldrh.w	r2, [sp, #108]	; 0x6c
 80013ca:	f823 2c28 	strh.w	r2, [r3, #-40]
  indx +=  2;
 80013ce:	1ca3      	adds	r3, r4, #2
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 80013d0:	aa12      	add	r2, sp, #72	; 0x48
 80013d2:	fa52 f383 	uxtab	r3, r2, r3
 80013d6:	f8bd 2070 	ldrh.w	r2, [sp, #112]	; 0x70
 80013da:	f823 2c28 	strh.w	r2, [r3, #-40]
  indx +=  2;    

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80013de:	2100      	movs	r1, #0
 80013e0:	2218      	movs	r2, #24
 80013e2:	a802      	add	r0, sp, #8
 80013e4:	f001 f921 	bl	800262a <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80013e8:	233f      	movs	r3, #63	; 0x3f
 80013ea:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 80013ee:	2383      	movs	r3, #131	; 0x83
 80013f0:	f8ad 300a 	strh.w	r3, [sp, #10]
  indx +=  2;    
 80013f4:	3404      	adds	r4, #4
  rq.cparam = (void *)buffer;
  rq.clen = indx;
  rq.rparam = &status;
 80013f6:	f10d 0307 	add.w	r3, sp, #7
 80013fa:	9306      	str	r3, [sp, #24]
  rq.clen = indx;
 80013fc:	b2e4      	uxtb	r4, r4
  rq.rlen = 1;
 80013fe:	2301      	movs	r3, #1

  if (hci_send_req(&rq, FALSE) < 0)
 8001400:	2100      	movs	r1, #0
 8001402:	a802      	add	r0, sp, #8
  rq.cparam = (void *)buffer;
 8001404:	9604      	str	r6, [sp, #16]
  rq.clen = indx;
 8001406:	9405      	str	r4, [sp, #20]
  rq.rlen = 1;
 8001408:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800140a:	f000 fa71 	bl	80018f0 <hci_send_req>
 800140e:	2800      	cmp	r0, #0
 8001410:	db05      	blt.n	800141e <aci_gap_set_discoverable+0xb6>
    return BLE_STATUS_TIMEOUT;

  if (status) {
 8001412:	f89d 0007 	ldrb.w	r0, [sp, #7]
    return status;
  }

  return 0;
}
 8001416:	b012      	add	sp, #72	; 0x48
 8001418:	bd70      	pop	{r4, r5, r6, pc}
    return BLE_STATUS_INVALID_PARAMS;
 800141a:	2042      	movs	r0, #66	; 0x42
 800141c:	e7fb      	b.n	8001416 <aci_gap_set_discoverable+0xae>
    return BLE_STATUS_TIMEOUT;
 800141e:	20ff      	movs	r0, #255	; 0xff
 8001420:	e7f9      	b.n	8001416 <aci_gap_set_discoverable+0xae>

08001422 <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 8001422:	b500      	push	{lr}
 8001424:	b089      	sub	sp, #36	; 0x24
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8001426:	2218      	movs	r2, #24
 8001428:	2100      	movs	r1, #0
 800142a:	a802      	add	r0, sp, #8
 800142c:	f001 f8fd 	bl	800262a <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8001430:	233f      	movs	r3, #63	; 0x3f
 8001432:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_GATT_INIT;
 8001436:	f240 1301 	movw	r3, #257	; 0x101
 800143a:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.rparam = &status;
 800143e:	f10d 0307 	add.w	r3, sp, #7
 8001442:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;

  if (hci_send_req(&rq, FALSE) < 0)
 8001444:	2100      	movs	r1, #0
  rq.rlen = 1;
 8001446:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 8001448:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 800144a:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800144c:	f000 fa50 	bl	80018f0 <hci_send_req>
 8001450:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;

  return status;
 8001452:	bfac      	ite	ge
 8001454:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 8001458:	20ff      	movlt	r0, #255	; 0xff
}
 800145a:	b009      	add	sp, #36	; 0x24
 800145c:	f85d fb04 	ldr.w	pc, [sp], #4

08001460 <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 8001460:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001462:	b08d      	sub	sp, #52	; 0x34
    
  if(service_uuid_type == UUID_TYPE_16){
    uuid_len = 2;
  }
  else {
    uuid_len = 16;
 8001464:	2801      	cmp	r0, #1
  buffer[indx] = service_uuid_type;
 8001466:	ae0c      	add	r6, sp, #48	; 0x30
    uuid_len = 16;
 8001468:	bf0c      	ite	eq
 800146a:	2402      	moveq	r4, #2
 800146c:	2410      	movne	r4, #16
  buffer[indx] = service_uuid_type;
 800146e:	f806 0d2c 	strb.w	r0, [r6, #-44]!
{
 8001472:	4617      	mov	r7, r2
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 8001474:	f10d 0005 	add.w	r0, sp, #5
 8001478:	4622      	mov	r2, r4
{
 800147a:	461d      	mov	r5, r3
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 800147c:	f001 f8ca 	bl	8002614 <memcpy>
  indx +=  uuid_len;
    
  buffer[indx] = service_type;
 8001480:	ab0c      	add	r3, sp, #48	; 0x30
 8001482:	4423      	add	r3, r4
 8001484:	f803 7c2b 	strb.w	r7, [r3, #-43]
  indx++;
    
  buffer[indx] = max_attr_records;
 8001488:	ab0c      	add	r3, sp, #48	; 0x30
 800148a:	191a      	adds	r2, r3, r4

  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = OGF_VENDOR_CMD;
  rq.ocf = OCF_GATT_ADD_SERV;
  rq.cparam = (void *)buffer;
  rq.clen = indx;
 800148c:	3403      	adds	r4, #3
  buffer[indx] = max_attr_records;
 800148e:	f802 5c2a 	strb.w	r5, [r2, #-42]
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8001492:	2500      	movs	r5, #0
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8001494:	2218      	movs	r2, #24
 8001496:	4629      	mov	r1, r5
 8001498:	eb0d 0002 	add.w	r0, sp, r2
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800149c:	f8ad 5000 	strh.w	r5, [sp]
 80014a0:	f88d 5002 	strb.w	r5, [sp, #2]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80014a4:	f001 f8c1 	bl	800262a <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80014a8:	233f      	movs	r3, #63	; 0x3f
 80014aa:	f8ad 3018 	strh.w	r3, [sp, #24]
  rq.ocf = OCF_GATT_ADD_SERV;
 80014ae:	f44f 7381 	mov.w	r3, #258	; 0x102
 80014b2:	f8ad 301a 	strh.w	r3, [sp, #26]
  rq.rparam = &resp;
  rq.rlen = GATT_ADD_SERV_RP_SIZE;

  if (hci_send_req(&rq, FALSE) < 0)
 80014b6:	4629      	mov	r1, r5
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 80014b8:	2303      	movs	r3, #3
  if (hci_send_req(&rq, FALSE) < 0)
 80014ba:	a806      	add	r0, sp, #24
  rq.cparam = (void *)buffer;
 80014bc:	9608      	str	r6, [sp, #32]
  rq.clen = indx;
 80014be:	9409      	str	r4, [sp, #36]	; 0x24
  rq.rparam = &resp;
 80014c0:	f8cd d028 	str.w	sp, [sp, #40]	; 0x28
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 80014c4:	930b      	str	r3, [sp, #44]	; 0x2c
  if (hci_send_req(&rq, FALSE) < 0)
 80014c6:	f000 fa13 	bl	80018f0 <hci_send_req>
 80014ca:	42a8      	cmp	r0, r5
 80014cc:	db09      	blt.n	80014e2 <aci_gatt_add_serv+0x82>
    return BLE_STATUS_TIMEOUT;

  if (resp.status) {
 80014ce:	f89d 0000 	ldrb.w	r0, [sp]
 80014d2:	b920      	cbnz	r0, 80014de <aci_gatt_add_serv+0x7e>
    return resp.status;
  }
    
  *serviceHandle = btohs(resp.handle);
 80014d4:	9b00      	ldr	r3, [sp, #0]
 80014d6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80014d8:	f3c3 230f 	ubfx	r3, r3, #8, #16
 80014dc:	8013      	strh	r3, [r2, #0]

  return 0;
}
 80014de:	b00d      	add	sp, #52	; 0x34
 80014e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return BLE_STATUS_TIMEOUT;
 80014e2:	20ff      	movs	r0, #255	; 0xff
 80014e4:	e7fb      	b.n	80014de <aci_gatt_add_serv+0x7e>

080014e6 <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 80014e6:	b570      	push	{r4, r5, r6, lr}
    
  if(charUuidType == UUID_TYPE_16){
    uuid_len = 2;
  }
  else {
    uuid_len = 16;
 80014e8:	2901      	cmp	r1, #1
{
 80014ea:	b08e      	sub	sp, #56	; 0x38
    uuid_len = 16;
 80014ec:	bf0c      	ite	eq
 80014ee:	2402      	moveq	r4, #2
 80014f0:	2410      	movne	r4, #16
{
 80014f2:	4616      	mov	r6, r2
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 80014f4:	f8ad 001c 	strh.w	r0, [sp, #28]
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 80014f8:	4622      	mov	r2, r4
  buffer[indx] = charUuidType;
 80014fa:	f88d 101e 	strb.w	r1, [sp, #30]
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 80014fe:	f10d 001f 	add.w	r0, sp, #31
 8001502:	4631      	mov	r1, r6
{
 8001504:	461d      	mov	r5, r3
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 8001506:	f001 f885 	bl	8002614 <memcpy>
  indx +=  uuid_len;
    
  buffer[indx] = charValueLen;
 800150a:	ab0e      	add	r3, sp, #56	; 0x38
 800150c:	191a      	adds	r2, r3, r4
  indx++;
    
  buffer[indx] = charProperties;
 800150e:	4613      	mov	r3, r2
  buffer[indx] = charValueLen;
 8001510:	f802 5c19 	strb.w	r5, [r2, #-25]
  buffer[indx] = charProperties;
 8001514:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 8001518:	f803 2c18 	strb.w	r2, [r3, #-24]
  indx++;
    
  buffer[indx] = secPermissions;
 800151c:	ab0e      	add	r3, sp, #56	; 0x38
 800151e:	4423      	add	r3, r4
 8001520:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 8001524:	f803 2c17 	strb.w	r2, [r3, #-23]
  indx++;
    
  buffer[indx] = gattEvtMask;
 8001528:	ab0e      	add	r3, sp, #56	; 0x38
 800152a:	4423      	add	r3, r4
 800152c:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8001530:	f803 2c16 	strb.w	r2, [r3, #-22]
  indx++;
    
  buffer[indx] = encryKeySize;
 8001534:	ab0e      	add	r3, sp, #56	; 0x38
 8001536:	4423      	add	r3, r4
 8001538:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 800153c:	f803 2c15 	strb.w	r2, [r3, #-21]
  indx++;
    
  buffer[indx] = isVariable;
 8001540:	ab0e      	add	r3, sp, #56	; 0x38
 8001542:	4423      	add	r3, r4
  indx++;
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8001544:	2500      	movs	r5, #0
  buffer[indx] = isVariable;
 8001546:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
 800154a:	f803 2c14 	strb.w	r2, [r3, #-20]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800154e:	4629      	mov	r1, r5
 8001550:	2218      	movs	r2, #24
 8001552:	a801      	add	r0, sp, #4
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8001554:	f8ad 5000 	strh.w	r5, [sp]
 8001558:	f88d 5002 	strb.w	r5, [sp, #2]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800155c:	f001 f865 	bl	800262a <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8001560:	233f      	movs	r3, #63	; 0x3f
 8001562:	f8ad 3004 	strh.w	r3, [sp, #4]
  rq.ocf = OCF_GATT_ADD_CHAR;
 8001566:	f44f 7382 	mov.w	r3, #260	; 0x104
 800156a:	f8ad 3006 	strh.w	r3, [sp, #6]
  rq.cparam = (void *)buffer;
 800156e:	ab07      	add	r3, sp, #28
 8001570:	9303      	str	r3, [sp, #12]
  rq.clen = indx;
 8001572:	3409      	adds	r4, #9
  rq.rparam = &resp;
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 8001574:	2303      	movs	r3, #3

  if (hci_send_req(&rq, FALSE) < 0)
 8001576:	4629      	mov	r1, r5
 8001578:	a801      	add	r0, sp, #4
  rq.clen = indx;
 800157a:	9404      	str	r4, [sp, #16]
  rq.rparam = &resp;
 800157c:	f8cd d014 	str.w	sp, [sp, #20]
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 8001580:	9306      	str	r3, [sp, #24]
  if (hci_send_req(&rq, FALSE) < 0)
 8001582:	f000 f9b5 	bl	80018f0 <hci_send_req>
 8001586:	42a8      	cmp	r0, r5
 8001588:	db09      	blt.n	800159e <aci_gatt_add_char+0xb8>
    return BLE_STATUS_TIMEOUT;

  if (resp.status) {
 800158a:	f89d 0000 	ldrb.w	r0, [sp]
 800158e:	b920      	cbnz	r0, 800159a <aci_gatt_add_char+0xb4>
    return resp.status;
  }
    
  *charHandle = btohs(resp.handle);
 8001590:	9b00      	ldr	r3, [sp, #0]
 8001592:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8001594:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8001598:	8013      	strh	r3, [r2, #0]

  return 0;
}
 800159a:	b00e      	add	sp, #56	; 0x38
 800159c:	bd70      	pop	{r4, r5, r6, pc}
    return BLE_STATUS_TIMEOUT;
 800159e:	20ff      	movs	r0, #255	; 0xff
 80015a0:	e7fb      	b.n	800159a <aci_gatt_add_char+0xb4>

080015a2 <aci_gatt_add_char_desc>:
                                  uint8_t accPermissions,
                                  uint8_t gattEvtMask,
                                  uint8_t encryKeySize,
                                  uint8_t isVariable,
                                  uint16_t* descHandle)                     
{
 80015a2:	b5f0      	push	{r4, r5, r6, r7, lr}
    
  if(descUuidType == UUID_TYPE_16){
    uuid_len = 2;
  }
  else {
    uuid_len = 16;
 80015a4:	2a01      	cmp	r2, #1
{
 80015a6:	b0a9      	sub	sp, #164	; 0xa4
    uuid_len = 16;
 80015a8:	bf0c      	ite	eq
 80015aa:	2402      	moveq	r4, #2
 80015ac:	2410      	movne	r4, #16
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 80015ae:	f8ad 0020 	strh.w	r0, [sp, #32]
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 80015b2:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
  buffer[indx] = descUuidType;
 80015b6:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
  }        
  BLUENRG_memcpy(buffer + indx, uuid, uuid_len);
 80015ba:	4619      	mov	r1, r3
 80015bc:	4622      	mov	r2, r4
 80015be:	f10d 0025 	add.w	r0, sp, #37	; 0x25
{
 80015c2:	f89d 50bc 	ldrb.w	r5, [sp, #188]	; 0xbc
  BLUENRG_memcpy(buffer + indx, uuid, uuid_len);
 80015c6:	f001 f825 	bl	8002614 <memcpy>
  indx +=  uuid_len;
    
  buffer[indx] = descValueMaxLen;
 80015ca:	ab28      	add	r3, sp, #160	; 0xa0
 80015cc:	4423      	add	r3, r4
 80015ce:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 80015d2:	f803 2c7b 	strb.w	r2, [r3, #-123]
  indx++;
    
  buffer[indx] = descValueLen;
  indx++;
 80015d6:	1de0      	adds	r0, r4, #7
  buffer[indx] = descValueLen;
 80015d8:	ab28      	add	r3, sp, #160	; 0xa0
 80015da:	4423      	add	r3, r4

  if ((descValueLen+indx+5) > HCI_MAX_PAYLOAD_SIZE)
 80015dc:	182c      	adds	r4, r5, r0
 80015de:	2c7b      	cmp	r4, #123	; 0x7b
  BLUENRG_memcpy(buffer + indx, uuid, uuid_len);
 80015e0:	ae08      	add	r6, sp, #32
  buffer[indx] = descValueLen;
 80015e2:	f803 5c7a 	strb.w	r5, [r3, #-122]
  if ((descValueLen+indx+5) > HCI_MAX_PAYLOAD_SIZE)
 80015e6:	dc54      	bgt.n	8001692 <aci_gatt_add_char_desc+0xf0>
    return BLE_STATUS_INVALID_PARAMS;
  
  BLUENRG_memcpy(buffer + indx, descValue, descValueLen);
 80015e8:	462a      	mov	r2, r5
 80015ea:	9930      	ldr	r1, [sp, #192]	; 0xc0
 80015ec:	4430      	add	r0, r6
 80015ee:	f001 f811 	bl	8002614 <memcpy>
  indx += descValueLen;
 80015f2:	b2e4      	uxtb	r4, r4
    
  buffer[indx] = secPermissions;
 80015f4:	ab28      	add	r3, sp, #160	; 0xa0
 80015f6:	4423      	add	r3, r4
 80015f8:	f89d 20c4 	ldrb.w	r2, [sp, #196]	; 0xc4
 80015fc:	f803 2c80 	strb.w	r2, [r3, #-128]
  indx++;
 8001600:	1c63      	adds	r3, r4, #1
    
  buffer[indx] = accPermissions;
 8001602:	aa28      	add	r2, sp, #160	; 0xa0
 8001604:	fa52 f383 	uxtab	r3, r2, r3
 8001608:	f89d 20c8 	ldrb.w	r2, [sp, #200]	; 0xc8
 800160c:	f803 2c80 	strb.w	r2, [r3, #-128]
  indx++;
 8001610:	1ca3      	adds	r3, r4, #2
    
  buffer[indx] = gattEvtMask;
 8001612:	aa28      	add	r2, sp, #160	; 0xa0
 8001614:	fa52 f383 	uxtab	r3, r2, r3
 8001618:	f89d 20cc 	ldrb.w	r2, [sp, #204]	; 0xcc
 800161c:	f803 2c80 	strb.w	r2, [r3, #-128]
  indx++;
 8001620:	1ce3      	adds	r3, r4, #3
    
  buffer[indx] = encryKeySize;
 8001622:	aa28      	add	r2, sp, #160	; 0xa0
 8001624:	fa52 f383 	uxtab	r3, r2, r3
 8001628:	f89d 20d0 	ldrb.w	r2, [sp, #208]	; 0xd0
 800162c:	f803 2c80 	strb.w	r2, [r3, #-128]
  indx++;
 8001630:	1d23      	adds	r3, r4, #4
    
  buffer[indx] = isVariable;
 8001632:	aa28      	add	r2, sp, #160	; 0xa0
 8001634:	fa52 f383 	uxtab	r3, r2, r3
  indx++;
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8001638:	2500      	movs	r5, #0
  buffer[indx] = isVariable;
 800163a:	f89d 20d4 	ldrb.w	r2, [sp, #212]	; 0xd4
 800163e:	f803 2c80 	strb.w	r2, [r3, #-128]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8001642:	4629      	mov	r1, r5
 8001644:	2218      	movs	r2, #24
 8001646:	a802      	add	r0, sp, #8
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8001648:	f8ad 5004 	strh.w	r5, [sp, #4]
 800164c:	f88d 5006 	strb.w	r5, [sp, #6]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8001650:	f000 ffeb 	bl	800262a <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8001654:	233f      	movs	r3, #63	; 0x3f
 8001656:	f8ad 3008 	strh.w	r3, [sp, #8]
  indx++;
 800165a:	3405      	adds	r4, #5
  rq.ocf = OCF_GATT_ADD_CHAR_DESC;
 800165c:	f240 1305 	movw	r3, #261	; 0x105
 8001660:	f8ad 300a 	strh.w	r3, [sp, #10]
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8001664:	af01      	add	r7, sp, #4
  rq.cparam = (void *)buffer;
  rq.clen = indx;
  rq.rparam = &resp;
  rq.rlen = GATT_ADD_CHAR_DESC_RP_SIZE;
 8001666:	2303      	movs	r3, #3
  rq.clen = indx;
 8001668:	b2e4      	uxtb	r4, r4

  if (hci_send_req(&rq, FALSE) < 0)
 800166a:	4629      	mov	r1, r5
 800166c:	a802      	add	r0, sp, #8
  rq.cparam = (void *)buffer;
 800166e:	9604      	str	r6, [sp, #16]
  rq.clen = indx;
 8001670:	9405      	str	r4, [sp, #20]
  rq.rparam = &resp;
 8001672:	9706      	str	r7, [sp, #24]
  rq.rlen = GATT_ADD_CHAR_DESC_RP_SIZE;
 8001674:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8001676:	f000 f93b 	bl	80018f0 <hci_send_req>
 800167a:	42a8      	cmp	r0, r5
 800167c:	db0b      	blt.n	8001696 <aci_gatt_add_char_desc+0xf4>
    return BLE_STATUS_TIMEOUT;

  if (resp.status) {
 800167e:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8001682:	b920      	cbnz	r0, 800168e <aci_gatt_add_char_desc+0xec>
    return resp.status;
  }
    
  *descHandle = btohs(resp.handle);
 8001684:	9b01      	ldr	r3, [sp, #4]
 8001686:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8001688:	f3c3 230f 	ubfx	r3, r3, #8, #16
 800168c:	8013      	strh	r3, [r2, #0]

  return 0;
}
 800168e:	b029      	add	sp, #164	; 0xa4
 8001690:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return BLE_STATUS_INVALID_PARAMS;
 8001692:	2042      	movs	r0, #66	; 0x42
 8001694:	e7fb      	b.n	800168e <aci_gatt_add_char_desc+0xec>
    return BLE_STATUS_TIMEOUT;
 8001696:	20ff      	movs	r0, #255	; 0xff
 8001698:	e7f9      	b.n	800168e <aci_gatt_add_char_desc+0xec>

0800169a <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
                                      const void *charValue)
{
 800169a:	b510      	push	{r4, lr}
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 800169c:	2b7a      	cmp	r3, #122	; 0x7a
{
 800169e:	b0a8      	sub	sp, #160	; 0xa0
 80016a0:	461c      	mov	r4, r3
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 80016a2:	dc2d      	bgt.n	8001700 <aci_gatt_update_char_value+0x66>
    return BLE_STATUS_INVALID_PARAMS;

  servHandle = htobs(servHandle);
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 80016a4:	f8ad 0020 	strh.w	r0, [sp, #32]
  indx += 2;
    
  charHandle = htobs(charHandle);
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 80016a8:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
  indx += 2;
    
  buffer[indx] = charValOffset;
 80016ac:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
  indx++;
    
  buffer[indx] = charValueLen;
  indx++;
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 80016b0:	992a      	ldr	r1, [sp, #168]	; 0xa8
  buffer[indx] = charValueLen;
 80016b2:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 80016b6:	461a      	mov	r2, r3
 80016b8:	f10d 0026 	add.w	r0, sp, #38	; 0x26
 80016bc:	f000 ffaa 	bl	8002614 <memcpy>
  indx +=  charValueLen;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80016c0:	2218      	movs	r2, #24
 80016c2:	2100      	movs	r1, #0
 80016c4:	a802      	add	r0, sp, #8
 80016c6:	f000 ffb0 	bl	800262a <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80016ca:	233f      	movs	r3, #63	; 0x3f
 80016cc:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 80016d0:	f44f 7383 	mov.w	r3, #262	; 0x106
 80016d4:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.cparam = (void *)buffer;
 80016d8:	ab08      	add	r3, sp, #32
 80016da:	9304      	str	r3, [sp, #16]
  indx +=  charValueLen;
 80016dc:	3406      	adds	r4, #6
  rq.clen = indx;
  rq.rparam = &status;
 80016de:	f10d 0307 	add.w	r3, sp, #7
 80016e2:	9306      	str	r3, [sp, #24]
  rq.clen = indx;
 80016e4:	b2e4      	uxtb	r4, r4
  rq.rlen = 1;
 80016e6:	2301      	movs	r3, #1

  if (hci_send_req(&rq, FALSE) < 0)
 80016e8:	2100      	movs	r1, #0
 80016ea:	a802      	add	r0, sp, #8
  rq.clen = indx;
 80016ec:	9405      	str	r4, [sp, #20]
  rq.rlen = 1;
 80016ee:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 80016f0:	f000 f8fe 	bl	80018f0 <hci_send_req>
 80016f4:	2800      	cmp	r0, #0
 80016f6:	db05      	blt.n	8001704 <aci_gatt_update_char_value+0x6a>
    return BLE_STATUS_TIMEOUT;

  if (status) {
 80016f8:	f89d 0007 	ldrb.w	r0, [sp, #7]
    return status;
  }

  return 0;
}
 80016fc:	b028      	add	sp, #160	; 0xa0
 80016fe:	bd10      	pop	{r4, pc}
    return BLE_STATUS_INVALID_PARAMS;
 8001700:	2042      	movs	r0, #66	; 0x42
 8001702:	e7fb      	b.n	80016fc <aci_gatt_update_char_value+0x62>
    return BLE_STATUS_TIMEOUT;
 8001704:	20ff      	movs	r0, #255	; 0xff
 8001706:	e7f9      	b.n	80016fc <aci_gatt_update_char_value+0x62>

08001708 <aci_gatt_allow_read>:

  return 0;
}

tBleStatus aci_gatt_allow_read(uint16_t conn_handle)
{
 8001708:	b500      	push	{lr}
 800170a:	b089      	sub	sp, #36	; 0x24
    gatt_allow_read_cp cp;
    uint8_t status;
    
    cp.conn_handle = htobs(conn_handle);

    BLUENRG_memset(&rq, 0, sizeof(rq));
 800170c:	2218      	movs	r2, #24
    cp.conn_handle = htobs(conn_handle);
 800170e:	f8ad 0004 	strh.w	r0, [sp, #4]
    BLUENRG_memset(&rq, 0, sizeof(rq));
 8001712:	2100      	movs	r1, #0
 8001714:	a802      	add	r0, sp, #8
 8001716:	f000 ff88 	bl	800262a <memset>
    rq.ogf = OGF_VENDOR_CMD;
 800171a:	233f      	movs	r3, #63	; 0x3f
 800171c:	f8ad 3008 	strh.w	r3, [sp, #8]
    rq.ocf = OCF_GATT_ALLOW_READ;
 8001720:	f240 1327 	movw	r3, #295	; 0x127
 8001724:	f8ad 300a 	strh.w	r3, [sp, #10]
    rq.cparam = &cp;
 8001728:	ab01      	add	r3, sp, #4
 800172a:	9304      	str	r3, [sp, #16]
    rq.clen = GATT_ALLOW_READ_CP_SIZE;
 800172c:	2302      	movs	r3, #2
 800172e:	9305      	str	r3, [sp, #20]
    rq.rparam = &status;
 8001730:	f10d 0303 	add.w	r3, sp, #3
 8001734:	9306      	str	r3, [sp, #24]
    rq.rlen = 1;

    if (hci_send_req(&rq, FALSE) < 0)
 8001736:	2100      	movs	r1, #0
    rq.rlen = 1;
 8001738:	2301      	movs	r3, #1
    if (hci_send_req(&rq, FALSE) < 0)
 800173a:	a802      	add	r0, sp, #8
    rq.rlen = 1;
 800173c:	9307      	str	r3, [sp, #28]
    if (hci_send_req(&rq, FALSE) < 0)
 800173e:	f000 f8d7 	bl	80018f0 <hci_send_req>
 8001742:	2800      	cmp	r0, #0
      return BLE_STATUS_TIMEOUT;

    return status;
 8001744:	bfac      	ite	ge
 8001746:	f89d 0003 	ldrbge.w	r0, [sp, #3]
      return BLE_STATUS_TIMEOUT;
 800174a:	20ff      	movlt	r0, #255	; 0xff
}
 800174c:	b009      	add	sp, #36	; 0x24
 800174e:	f85d fb04 	ldr.w	pc, [sp], #4

08001752 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t offset, 
                                    uint8_t len,
                                    const uint8_t *val)
{
 8001752:	b510      	push	{r4, lr}
 8001754:	460c      	mov	r4, r1
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
    
  if ((len+2) > HCI_MAX_PAYLOAD_SIZE)
 8001756:	2c7e      	cmp	r4, #126	; 0x7e
{
 8001758:	b0a8      	sub	sp, #160	; 0xa0
 800175a:	4611      	mov	r1, r2
  if ((len+2) > HCI_MAX_PAYLOAD_SIZE)
 800175c:	dc27      	bgt.n	80017ae <aci_hal_write_config_data+0x5c>
  indx++;
    
  buffer[indx] = len;
  indx++;
        
  BLUENRG_memcpy(buffer + indx, val, len);
 800175e:	4622      	mov	r2, r4
  buffer[indx] = offset;
 8001760:	f88d 0020 	strb.w	r0, [sp, #32]
  BLUENRG_memcpy(buffer + indx, val, len);
 8001764:	f10d 0022 	add.w	r0, sp, #34	; 0x22
  buffer[indx] = len;
 8001768:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
  BLUENRG_memcpy(buffer + indx, val, len);
 800176c:	f000 ff52 	bl	8002614 <memcpy>
  indx +=  len;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8001770:	2218      	movs	r2, #24
 8001772:	2100      	movs	r1, #0
 8001774:	a802      	add	r0, sp, #8
 8001776:	f000 ff58 	bl	800262a <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800177a:	233f      	movs	r3, #63	; 0x3f
 800177c:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_HAL_WRITE_CONFIG_DATA;
 8001780:	230c      	movs	r3, #12
 8001782:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.cparam = (void *)buffer;
 8001786:	ab08      	add	r3, sp, #32
 8001788:	9304      	str	r3, [sp, #16]
  indx +=  len;
 800178a:	3402      	adds	r4, #2
  rq.clen = indx;
  rq.rparam = &status;
 800178c:	f10d 0307 	add.w	r3, sp, #7
 8001790:	9306      	str	r3, [sp, #24]
  rq.clen = indx;
 8001792:	b2e4      	uxtb	r4, r4
  rq.rlen = 1;
 8001794:	2301      	movs	r3, #1

  if (hci_send_req(&rq, FALSE) < 0)
 8001796:	2100      	movs	r1, #0
 8001798:	a802      	add	r0, sp, #8
  rq.clen = indx;
 800179a:	9405      	str	r4, [sp, #20]
  rq.rlen = 1;
 800179c:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800179e:	f000 f8a7 	bl	80018f0 <hci_send_req>
 80017a2:	2800      	cmp	r0, #0
 80017a4:	db05      	blt.n	80017b2 <aci_hal_write_config_data+0x60>
    return BLE_STATUS_TIMEOUT;

  return status;
 80017a6:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 80017aa:	b028      	add	sp, #160	; 0xa0
 80017ac:	bd10      	pop	{r4, pc}
    return BLE_STATUS_INVALID_PARAMS;
 80017ae:	2042      	movs	r0, #66	; 0x42
 80017b0:	e7fb      	b.n	80017aa <aci_hal_write_config_data+0x58>
    return BLE_STATUS_TIMEOUT;
 80017b2:	20ff      	movs	r0, #255	; 0xff
 80017b4:	e7f9      	b.n	80017aa <aci_hal_write_config_data+0x58>

080017b6 <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 80017b6:	b500      	push	{lr}
 80017b8:	b089      	sub	sp, #36	; 0x24
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80017ba:	2218      	movs	r2, #24
 80017bc:	2100      	movs	r1, #0
 80017be:	a802      	add	r0, sp, #8
 80017c0:	f000 ff33 	bl	800262a <memset>
  rq.ogf = OGF_HOST_CTL;
 80017c4:	2303      	movs	r3, #3
 80017c6:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_RESET;
 80017ca:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.rparam = &status;
 80017ce:	f10d 0307 	add.w	r3, sp, #7
 80017d2:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
  
  if (hci_send_req(&rq, FALSE) < 0)
 80017d4:	2100      	movs	r1, #0
  rq.rlen = 1;
 80017d6:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 80017d8:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 80017da:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 80017dc:	f000 f888 	bl	80018f0 <hci_send_req>
 80017e0:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  
  return status;  
 80017e2:	bfac      	ite	ge
 80017e4:	f89d 0007 	ldrbge.w	r0, [sp, #7]
 80017e8:	20ff      	movlt	r0, #255	; 0xff
}
 80017ea:	b009      	add	sp, #36	; 0x24
 80017ec:	f85d fb04 	ldr.w	pc, [sp], #4

080017f0 <hci_le_set_scan_resp_data>:
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 80017f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017f2:	b091      	sub	sp, #68	; 0x44
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 80017f4:	ad08      	add	r5, sp, #32
 80017f6:	2420      	movs	r4, #32
{
 80017f8:	4606      	mov	r6, r0
 80017fa:	460f      	mov	r7, r1
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 80017fc:	4622      	mov	r2, r4
 80017fe:	2100      	movs	r1, #0
 8001800:	4628      	mov	r0, r5
 8001802:	f000 ff12 	bl	800262a <memset>
  scan_resp_cp.length = length;
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 8001806:	2e1f      	cmp	r6, #31
 8001808:	4632      	mov	r2, r6
 800180a:	4639      	mov	r1, r7
 800180c:	bf28      	it	cs
 800180e:	221f      	movcs	r2, #31
 8001810:	f10d 0021 	add.w	r0, sp, #33	; 0x21
  scan_resp_cp.length = length;
 8001814:	f88d 6020 	strb.w	r6, [sp, #32]
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 8001818:	f000 fefc 	bl	8002614 <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800181c:	2218      	movs	r2, #24
 800181e:	2100      	movs	r1, #0
 8001820:	a802      	add	r0, sp, #8
 8001822:	f000 ff02 	bl	800262a <memset>
  rq.ogf = OGF_LE_CTL;
 8001826:	2308      	movs	r3, #8
 8001828:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
 800182c:	2309      	movs	r3, #9
 800182e:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.cparam = &scan_resp_cp;
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
  rq.rparam = &status;
 8001832:	f10d 0307 	add.w	r3, sp, #7
 8001836:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
  
  if (hci_send_req(&rq, FALSE) < 0)
 8001838:	2100      	movs	r1, #0
  rq.rlen = 1;
 800183a:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 800183c:	a802      	add	r0, sp, #8
  rq.cparam = &scan_resp_cp;
 800183e:	9504      	str	r5, [sp, #16]
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
 8001840:	9405      	str	r4, [sp, #20]
  rq.rlen = 1;
 8001842:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8001844:	f000 f854 	bl	80018f0 <hci_send_req>
 8001848:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  
  return status;
 800184a:	bfac      	ite	ge
 800184c:	f89d 0007 	ldrbge.w	r0, [sp, #7]
 8001850:	20ff      	movlt	r0, #255	; 0xff
}
 8001852:	b011      	add	sp, #68	; 0x44
 8001854:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001858 <move_list.constprop.0>:
  *
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
 8001858:	b537      	push	{r0, r1, r2, r4, r5, lr}
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
  {
    list_remove_tail(src_list, &tmp_node);
    list_insert_head(dest_list, tmp_node);
 800185a:	4d08      	ldr	r5, [pc, #32]	; (800187c <move_list.constprop.0+0x24>)
static void move_list(tListNode * dest_list, tListNode * src_list)
 800185c:	4604      	mov	r4, r0
  while (!list_is_empty(src_list))
 800185e:	4620      	mov	r0, r4
 8001860:	f000 f959 	bl	8001b16 <list_is_empty>
 8001864:	b108      	cbz	r0, 800186a <move_list.constprop.0+0x12>
  }
}
 8001866:	b003      	add	sp, #12
 8001868:	bd30      	pop	{r4, r5, pc}
    list_remove_tail(src_list, &tmp_node);
 800186a:	a901      	add	r1, sp, #4
 800186c:	4620      	mov	r0, r4
 800186e:	f000 f991 	bl	8001b94 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 8001872:	9901      	ldr	r1, [sp, #4]
 8001874:	4628      	mov	r0, r5
 8001876:	f000 f958 	bl	8001b2a <list_insert_head>
 800187a:	e7f0      	b.n	800185e <move_list.constprop.0+0x6>
 800187c:	2000042c 	.word	0x2000042c

08001880 <hci_init>:
}

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8001880:	b570      	push	{r4, r5, r6, lr}
  uint8_t index;
  
  if(UserEvtRx != NULL)
 8001882:	b108      	cbz	r0, 8001888 <hci_init+0x8>
  {
    hciContext.UserEvtRx = UserEvtRx;
 8001884:	4b0f      	ldr	r3, [pc, #60]	; (80018c4 <hci_init+0x44>)
 8001886:	61d8      	str	r0, [r3, #28]
  }
  
  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 8001888:	f000 fb6e 	bl	8001f68 <hci_tl_lowlevel_init>
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 800188c:	480e      	ldr	r0, [pc, #56]	; (80018c8 <hci_init+0x48>)
  list_init_head(&hciReadPktRxQueue);
  
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 800188e:	4e0f      	ldr	r6, [pc, #60]	; (80018cc <hci_init+0x4c>)
 8001890:	4d0d      	ldr	r5, [pc, #52]	; (80018c8 <hci_init+0x48>)
  list_init_head(&hciReadPktPool);
 8001892:	f000 f93d 	bl	8001b10 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 8001896:	480e      	ldr	r0, [pc, #56]	; (80018d0 <hci_init+0x50>)
 8001898:	f000 f93a 	bl	8001b10 <list_init_head>
 800189c:	2400      	movs	r4, #0
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 800189e:	1931      	adds	r1, r6, r4
 80018a0:	4628      	mov	r0, r5
 80018a2:	348c      	adds	r4, #140	; 0x8c
 80018a4:	f000 f94d 	bl	8001b42 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 80018a8:	f5b4 7f2f 	cmp.w	r4, #700	; 0x2bc
 80018ac:	d1f7      	bne.n	800189e <hci_init+0x1e>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 80018ae:	4c05      	ldr	r4, [pc, #20]	; (80018c4 <hci_init+0x44>)
 80018b0:	6822      	ldr	r2, [r4, #0]
 80018b2:	b10a      	cbz	r2, 80018b8 <hci_init+0x38>
 80018b4:	2000      	movs	r0, #0
 80018b6:	4790      	blx	r2
  if (hciContext.io.Reset) hciContext.io.Reset();
 80018b8:	68a3      	ldr	r3, [r4, #8]
 80018ba:	b113      	cbz	r3, 80018c2 <hci_init+0x42>
}
 80018bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  if (hciContext.io.Reset) hciContext.io.Reset();
 80018c0:	4718      	bx	r3
 80018c2:	bd70      	pop	{r4, r5, r6, pc}
 80018c4:	20000038 	.word	0x20000038
 80018c8:	20000424 	.word	0x20000424
 80018cc:	20000058 	.word	0x20000058
 80018d0:	2000042c 	.word	0x2000042c

080018d4 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 80018d4:	4b05      	ldr	r3, [pc, #20]	; (80018ec <hci_register_io_bus+0x18>)
 80018d6:	6802      	ldr	r2, [r0, #0]
 80018d8:	601a      	str	r2, [r3, #0]
  hciContext.io.Receive = fops->Receive;  
 80018da:	68c2      	ldr	r2, [r0, #12]
 80018dc:	60da      	str	r2, [r3, #12]
  hciContext.io.Send    = fops->Send;
 80018de:	6902      	ldr	r2, [r0, #16]
 80018e0:	611a      	str	r2, [r3, #16]
  hciContext.io.GetTick = fops->GetTick;
 80018e2:	6982      	ldr	r2, [r0, #24]
 80018e4:	619a      	str	r2, [r3, #24]
  hciContext.io.Reset   = fops->Reset;    
 80018e6:	6882      	ldr	r2, [r0, #8]
 80018e8:	609a      	str	r2, [r3, #8]
 80018ea:	4770      	bx	lr
 80018ec:	20000038 	.word	0x20000038

080018f0 <hci_send_req>:
}

int hci_send_req(struct hci_request* r, BOOL async)
{
 80018f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80018f4:	b0a5      	sub	sp, #148	; 0x94
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 80018f6:	8846      	ldrh	r6, [r0, #2]
 80018f8:	f8b0 8000 	ldrh.w	r8, [r0]
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 80018fc:	4f59      	ldr	r7, [pc, #356]	; (8001a64 <hci_send_req+0x174>)
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 80018fe:	f8df 916c 	ldr.w	r9, [pc, #364]	; 8001a6c <hci_send_req+0x17c>
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 8001902:	2300      	movs	r3, #0
{
 8001904:	4604      	mov	r4, r0
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 8001906:	a802      	add	r0, sp, #8
{
 8001908:	460d      	mov	r5, r1
  tHciDataPacket * hciReadPacket = NULL;
 800190a:	9301      	str	r3, [sp, #4]
  list_init_head(&hciTempQueue);
 800190c:	f000 f900 	bl	8001b10 <list_init_head>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8001910:	4638      	mov	r0, r7
 8001912:	f000 f951 	bl	8001bb8 <list_get_size>
 8001916:	2801      	cmp	r0, #1
 8001918:	dd53      	ble.n	80019c2 <hci_send_req+0xd2>
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 800191a:	8863      	ldrh	r3, [r4, #2]
 800191c:	8822      	ldrh	r2, [r4, #0]

  free_event_list();
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 800191e:	7b27      	ldrb	r7, [r4, #12]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 8001920:	68a1      	ldr	r1, [r4, #8]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 8001922:	f88d 7013 	strb.w	r7, [sp, #19]
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 8001926:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800192a:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
  payload[0] = HCI_COMMAND_PKT;
 800192e:	2201      	movs	r2, #1
 8001930:	f88d 2010 	strb.w	r2, [sp, #16]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 8001934:	a805      	add	r0, sp, #20
 8001936:	463a      	mov	r2, r7
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 8001938:	f8ad 3011 	strh.w	r3, [sp, #17]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 800193c:	f000 fe6a 	bl	8002614 <memcpy>
  if (hciContext.io.Send)
 8001940:	4b49      	ldr	r3, [pc, #292]	; (8001a68 <hci_send_req+0x178>)
 8001942:	691b      	ldr	r3, [r3, #16]
 8001944:	b113      	cbz	r3, 800194c <hci_send_req+0x5c>
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 8001946:	1d39      	adds	r1, r7, #4
 8001948:	a804      	add	r0, sp, #16
 800194a:	4798      	blx	r3
  
  if (async)
 800194c:	2d00      	cmp	r5, #0
 800194e:	d178      	bne.n	8001a42 <hci_send_req+0x152>
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8001950:	f3c6 0509 	ubfx	r5, r6, #0, #10
 8001954:	ea45 2588 	orr.w	r5, r5, r8, lsl #10
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 8001958:	4e44      	ldr	r6, [pc, #272]	; (8001a6c <hci_send_req+0x17c>)
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 800195a:	4f42      	ldr	r7, [pc, #264]	; (8001a64 <hci_send_req+0x174>)
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 800195c:	b2ad      	uxth	r5, r5
    uint32_t tickstart = HAL_GetTick();
 800195e:	f7fe fe0d 	bl	800057c <HAL_GetTick>
 8001962:	4680      	mov	r8, r0
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8001964:	f7fe fe0a 	bl	800057c <HAL_GetTick>
 8001968:	eba0 0008 	sub.w	r0, r0, r8
 800196c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001970:	d84a      	bhi.n	8001a08 <hci_send_req+0x118>
      if (!list_is_empty(&hciReadPktRxQueue)) 
 8001972:	4630      	mov	r0, r6
 8001974:	f000 f8cf 	bl	8001b16 <list_is_empty>
 8001978:	2800      	cmp	r0, #0
 800197a:	d1f3      	bne.n	8001964 <hci_send_req+0x74>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 800197c:	a901      	add	r1, sp, #4
 800197e:	4630      	mov	r0, r6
 8001980:	f000 f8f6 	bl	8001b70 <list_remove_head>
    hci_hdr = (void *)hciReadPacket->dataBuff;
 8001984:	9901      	ldr	r1, [sp, #4]
    if (hci_hdr->type == HCI_EVENT_PKT)
 8001986:	7a0b      	ldrb	r3, [r1, #8]
 8001988:	2b04      	cmp	r3, #4
 800198a:	d109      	bne.n	80019a0 <hci_send_req+0xb0>
      switch (event_pckt->evt) 
 800198c:	7a48      	ldrb	r0, [r1, #9]
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 800198e:	f891 3088 	ldrb.w	r3, [r1, #136]	; 0x88
      switch (event_pckt->evt) 
 8001992:	280f      	cmp	r0, #15
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 8001994:	f1a3 0203 	sub.w	r2, r3, #3
      switch (event_pckt->evt) 
 8001998:	d02c      	beq.n	80019f4 <hci_send_req+0x104>
 800199a:	d81b      	bhi.n	80019d4 <hci_send_req+0xe4>
 800199c:	280e      	cmp	r0, #14
 800199e:	d052      	beq.n	8001a46 <hci_send_req+0x156>
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 80019a0:	4638      	mov	r0, r7
 80019a2:	f000 f8b8 	bl	8001b16 <list_is_empty>
 80019a6:	2800      	cmp	r0, #0
 80019a8:	d058      	beq.n	8001a5c <hci_send_req+0x16c>
 80019aa:	4630      	mov	r0, r6
 80019ac:	f000 f8b3 	bl	8001b16 <list_is_empty>
 80019b0:	2800      	cmp	r0, #0
 80019b2:	d053      	beq.n	8001a5c <hci_send_req+0x16c>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 80019b4:	9901      	ldr	r1, [sp, #4]
 80019b6:	4638      	mov	r0, r7
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 80019b8:	f000 f8c3 	bl	8001b42 <list_insert_tail>
      hciReadPacket=NULL;
 80019bc:	2300      	movs	r3, #0
 80019be:	9301      	str	r3, [sp, #4]
 80019c0:	e7cd      	b.n	800195e <hci_send_req+0x6e>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 80019c2:	a904      	add	r1, sp, #16
 80019c4:	4648      	mov	r0, r9
 80019c6:	f000 f8d3 	bl	8001b70 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 80019ca:	9904      	ldr	r1, [sp, #16]
 80019cc:	4638      	mov	r0, r7
 80019ce:	f000 f8b8 	bl	8001b42 <list_insert_tail>
 80019d2:	e79d      	b.n	8001910 <hci_send_req+0x20>
      switch (event_pckt->evt) 
 80019d4:	2810      	cmp	r0, #16
 80019d6:	d017      	beq.n	8001a08 <hci_send_req+0x118>
 80019d8:	283e      	cmp	r0, #62	; 0x3e
 80019da:	d1e1      	bne.n	80019a0 <hci_send_req+0xb0>
        if (me->subevent != r->event)
 80019dc:	7ac8      	ldrb	r0, [r1, #11]
 80019de:	6862      	ldr	r2, [r4, #4]
 80019e0:	4290      	cmp	r0, r2
 80019e2:	d1dd      	bne.n	80019a0 <hci_send_req+0xb0>
        len -= 1;
 80019e4:	1f1a      	subs	r2, r3, #4
        r->rlen = MIN(len, r->rlen);
 80019e6:	6963      	ldr	r3, [r4, #20]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	bf28      	it	cs
 80019ec:	461a      	movcs	r2, r3
 80019ee:	6162      	str	r2, [r4, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 80019f0:	310c      	adds	r1, #12
 80019f2:	e01c      	b.n	8001a2e <hci_send_req+0x13e>
        if (cs->opcode != opcode)
 80019f4:	f8b1 300d 	ldrh.w	r3, [r1, #13]
 80019f8:	42ab      	cmp	r3, r5
 80019fa:	d105      	bne.n	8001a08 <hci_send_req+0x118>
        if (r->event != EVT_CMD_STATUS) {
 80019fc:	6863      	ldr	r3, [r4, #4]
 80019fe:	2b0f      	cmp	r3, #15
 8001a00:	d00f      	beq.n	8001a22 <hci_send_req+0x132>
          if (cs->status) {
 8001a02:	7acb      	ldrb	r3, [r1, #11]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d0cb      	beq.n	80019a0 <hci_send_req+0xb0>
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 8001a08:	9901      	ldr	r1, [sp, #4]
 8001a0a:	b111      	cbz	r1, 8001a12 <hci_send_req+0x122>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8001a0c:	4815      	ldr	r0, [pc, #84]	; (8001a64 <hci_send_req+0x174>)
 8001a0e:	f000 f88c 	bl	8001b2a <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);  
 8001a12:	a802      	add	r0, sp, #8
 8001a14:	f7ff ff20 	bl	8001858 <move_list.constprop.0>
  return -1;
 8001a18:	f04f 30ff 	mov.w	r0, #4294967295
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
  move_list(&hciReadPktRxQueue, &hciTempQueue);
  return 0;
}
 8001a1c:	b025      	add	sp, #148	; 0x94
 8001a1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        r->rlen = MIN(len, r->rlen);
 8001a22:	6963      	ldr	r3, [r4, #20]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	bf28      	it	cs
 8001a28:	461a      	movcs	r2, r3
 8001a2a:	6162      	str	r2, [r4, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8001a2c:	310b      	adds	r1, #11
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 8001a2e:	6920      	ldr	r0, [r4, #16]
 8001a30:	f000 fdf0 	bl	8002614 <memcpy>
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 8001a34:	480b      	ldr	r0, [pc, #44]	; (8001a64 <hci_send_req+0x174>)
 8001a36:	9901      	ldr	r1, [sp, #4]
 8001a38:	f000 f877 	bl	8001b2a <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8001a3c:	a802      	add	r0, sp, #8
 8001a3e:	f7ff ff0b 	bl	8001858 <move_list.constprop.0>
    return 0;
 8001a42:	2000      	movs	r0, #0
 8001a44:	e7ea      	b.n	8001a1c <hci_send_req+0x12c>
        if (cc->opcode != opcode)
 8001a46:	898a      	ldrh	r2, [r1, #12]
 8001a48:	42aa      	cmp	r2, r5
 8001a4a:	d1dd      	bne.n	8001a08 <hci_send_req+0x118>
        len -= EVT_CMD_COMPLETE_SIZE;
 8001a4c:	1f9a      	subs	r2, r3, #6
        r->rlen = MIN(len, r->rlen);
 8001a4e:	6963      	ldr	r3, [r4, #20]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	bf28      	it	cs
 8001a54:	461a      	movcs	r2, r3
 8001a56:	6162      	str	r2, [r4, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8001a58:	310e      	adds	r1, #14
 8001a5a:	e7e8      	b.n	8001a2e <hci_send_req+0x13e>
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 8001a5c:	9901      	ldr	r1, [sp, #4]
 8001a5e:	a802      	add	r0, sp, #8
 8001a60:	e7aa      	b.n	80019b8 <hci_send_req+0xc8>
 8001a62:	bf00      	nop
 8001a64:	20000424 	.word	0x20000424
 8001a68:	20000038 	.word	0x20000038
 8001a6c:	2000042c 	.word	0x2000042c

08001a70 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8001a70:	b573      	push	{r0, r1, r4, r5, r6, lr}
  tHciDataPacket * hciReadPacket = NULL;
 8001a72:	2300      	movs	r3, #0
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8001a74:	4c0b      	ldr	r4, [pc, #44]	; (8001aa4 <hci_user_evt_proc+0x34>)
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
    if (hciContext.UserEvtRx != NULL)
 8001a76:	4d0c      	ldr	r5, [pc, #48]	; (8001aa8 <hci_user_evt_proc+0x38>)
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
    }
    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8001a78:	4e0c      	ldr	r6, [pc, #48]	; (8001aac <hci_user_evt_proc+0x3c>)
  tHciDataPacket * hciReadPacket = NULL;
 8001a7a:	9301      	str	r3, [sp, #4]
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8001a7c:	4620      	mov	r0, r4
 8001a7e:	f000 f84a 	bl	8001b16 <list_is_empty>
 8001a82:	b108      	cbz	r0, 8001a88 <hci_user_evt_proc+0x18>
  }
}
 8001a84:	b002      	add	sp, #8
 8001a86:	bd70      	pop	{r4, r5, r6, pc}
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 8001a88:	a901      	add	r1, sp, #4
 8001a8a:	4620      	mov	r0, r4
 8001a8c:	f000 f870 	bl	8001b70 <list_remove_head>
    if (hciContext.UserEvtRx != NULL)
 8001a90:	69eb      	ldr	r3, [r5, #28]
 8001a92:	b113      	cbz	r3, 8001a9a <hci_user_evt_proc+0x2a>
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 8001a94:	9801      	ldr	r0, [sp, #4]
 8001a96:	3008      	adds	r0, #8
 8001a98:	4798      	blx	r3
    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8001a9a:	9901      	ldr	r1, [sp, #4]
 8001a9c:	4630      	mov	r0, r6
 8001a9e:	f000 f850 	bl	8001b42 <list_insert_tail>
 8001aa2:	e7eb      	b.n	8001a7c <hci_user_evt_proc+0xc>
 8001aa4:	2000042c 	.word	0x2000042c
 8001aa8:	20000038 	.word	0x20000038
 8001aac:	20000424 	.word	0x20000424

08001ab0 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 8001ab0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  tHciDataPacket * hciReadPacket = NULL;
 8001ab2:	2300      	movs	r3, #0
  uint8_t data_len;
  
  int32_t ret = 0;
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 8001ab4:	4813      	ldr	r0, [pc, #76]	; (8001b04 <hci_notify_asynch_evt+0x54>)
  tHciDataPacket * hciReadPacket = NULL;
 8001ab6:	9301      	str	r3, [sp, #4]
  if (list_is_empty (&hciReadPktPool) == FALSE)
 8001ab8:	f000 f82d 	bl	8001b16 <list_is_empty>
 8001abc:	b9d8      	cbnz	r0, 8001af6 <hci_notify_asynch_evt+0x46>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 8001abe:	a901      	add	r1, sp, #4
 8001ac0:	4810      	ldr	r0, [pc, #64]	; (8001b04 <hci_notify_asynch_evt+0x54>)
 8001ac2:	f000 f855 	bl	8001b70 <list_remove_head>
    
    if (hciContext.io.Receive)
 8001ac6:	4b10      	ldr	r3, [pc, #64]	; (8001b08 <hci_notify_asynch_evt+0x58>)
 8001ac8:	68db      	ldr	r3, [r3, #12]
 8001aca:	b193      	cbz	r3, 8001af2 <hci_notify_asynch_evt+0x42>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 8001acc:	9801      	ldr	r0, [sp, #4]
 8001ace:	2180      	movs	r1, #128	; 0x80
 8001ad0:	3008      	adds	r0, #8
 8001ad2:	4798      	blx	r3
 8001ad4:	b2c5      	uxtb	r5, r0
      if (data_len > 0)
      {                    
        hciReadPacket->data_len = data_len;
 8001ad6:	9901      	ldr	r1, [sp, #4]
      if (data_len > 0)
 8001ad8:	b185      	cbz	r5, 8001afc <hci_notify_asynch_evt+0x4c>
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 8001ada:	7a0b      	ldrb	r3, [r1, #8]
        hciReadPacket->data_len = data_len;
 8001adc:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 8001ae0:	2b04      	cmp	r3, #4
 8001ae2:	d10b      	bne.n	8001afc <hci_notify_asynch_evt+0x4c>
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 8001ae4:	7a8b      	ldrb	r3, [r1, #10]
 8001ae6:	1ee8      	subs	r0, r5, #3
 8001ae8:	4283      	cmp	r3, r0
 8001aea:	d107      	bne.n	8001afc <hci_notify_asynch_evt+0x4c>
        if (verify_packet(hciReadPacket) == 0)
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 8001aec:	4807      	ldr	r0, [pc, #28]	; (8001b0c <hci_notify_asynch_evt+0x5c>)
 8001aee:	f000 f828 	bl	8001b42 <list_insert_tail>
  int32_t ret = 0;
 8001af2:	2000      	movs	r0, #0
 8001af4:	e000      	b.n	8001af8 <hci_notify_asynch_evt+0x48>
      }
    }
  }
  else 
  {
    ret = 1;
 8001af6:	2001      	movs	r0, #1
  }
  return ret;

}
 8001af8:	b003      	add	sp, #12
 8001afa:	bd30      	pop	{r4, r5, pc}
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 8001afc:	4801      	ldr	r0, [pc, #4]	; (8001b04 <hci_notify_asynch_evt+0x54>)
 8001afe:	f000 f814 	bl	8001b2a <list_insert_head>
 8001b02:	e7f6      	b.n	8001af2 <hci_notify_asynch_evt+0x42>
 8001b04:	20000424 	.word	0x20000424
 8001b08:	20000038 	.word	0x20000038
 8001b0c:	2000042c 	.word	0x2000042c

08001b10 <list_init_head>:
/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
  listHead->next = listHead;
 8001b10:	6000      	str	r0, [r0, #0]
  listHead->prev = listHead;	
 8001b12:	6040      	str	r0, [r0, #4]
 8001b14:	4770      	bx	lr

08001b16 <list_is_empty>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b16:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8001b1a:	b672      	cpsid	i
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 8001b1c:	6803      	ldr	r3, [r0, #0]
  {
    return_value = 1;
 8001b1e:	1a1b      	subs	r3, r3, r0
 8001b20:	4258      	negs	r0, r3
 8001b22:	4158      	adcs	r0, r3
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b24:	f382 8810 	msr	PRIMASK, r2
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
}
 8001b28:	4770      	bx	lr

08001b2a <list_insert_head>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b2a:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8001b2e:	b672      	cpsid	i
{
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 8001b30:	6802      	ldr	r2, [r0, #0]
 8001b32:	600a      	str	r2, [r1, #0]
  node->prev = listHead;
 8001b34:	6048      	str	r0, [r1, #4]
  listHead->next = node;
 8001b36:	6001      	str	r1, [r0, #0]
  (node->next)->prev = node;
 8001b38:	680a      	ldr	r2, [r1, #0]
 8001b3a:	6051      	str	r1, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b3c:	f383 8810 	msr	PRIMASK, r3
 8001b40:	4770      	bx	lr

08001b42 <list_insert_tail>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b42:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8001b46:	b672      	cpsid	i
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
  node->prev = listHead->prev;
 8001b48:	6842      	ldr	r2, [r0, #4]
 8001b4a:	604a      	str	r2, [r1, #4]
  node->next = listHead;
 8001b4c:	6008      	str	r0, [r1, #0]
  listHead->prev = node;
 8001b4e:	6041      	str	r1, [r0, #4]
  (node->prev)->next = node;
 8001b50:	684a      	ldr	r2, [r1, #4]
 8001b52:	6011      	str	r1, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b54:	f383 8810 	msr	PRIMASK, r3
 8001b58:	4770      	bx	lr

08001b5a <list_remove_node>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b5a:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8001b5e:	b672      	cpsid	i
{
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 8001b60:	e890 000a 	ldmia.w	r0, {r1, r3}
 8001b64:	6019      	str	r1, [r3, #0]
  (node->next)->prev = node->prev;
 8001b66:	6801      	ldr	r1, [r0, #0]
 8001b68:	604b      	str	r3, [r1, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b6a:	f382 8810 	msr	PRIMASK, r2
 8001b6e:	4770      	bx	lr

08001b70 <list_remove_head>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 8001b70:	b538      	push	{r3, r4, r5, lr}
 8001b72:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b74:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8001b78:	b672      	cpsid	i
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 8001b7a:	6803      	ldr	r3, [r0, #0]
 8001b7c:	600b      	str	r3, [r1, #0]
  list_remove_node (listHead->next);
 8001b7e:	6800      	ldr	r0, [r0, #0]
 8001b80:	f7ff ffeb 	bl	8001b5a <list_remove_node>
  (*node)->next = NULL;
 8001b84:	6822      	ldr	r2, [r4, #0]
 8001b86:	2300      	movs	r3, #0
 8001b88:	6013      	str	r3, [r2, #0]
  (*node)->prev = NULL;
 8001b8a:	6822      	ldr	r2, [r4, #0]
 8001b8c:	6053      	str	r3, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b8e:	f385 8810 	msr	PRIMASK, r5
 8001b92:	bd38      	pop	{r3, r4, r5, pc}

08001b94 <list_remove_tail>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 8001b94:	b538      	push	{r3, r4, r5, lr}
 8001b96:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b98:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8001b9c:	b672      	cpsid	i
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 8001b9e:	6843      	ldr	r3, [r0, #4]
 8001ba0:	600b      	str	r3, [r1, #0]
  list_remove_node (listHead->prev);
 8001ba2:	6840      	ldr	r0, [r0, #4]
 8001ba4:	f7ff ffd9 	bl	8001b5a <list_remove_node>
  (*node)->next = NULL;
 8001ba8:	6822      	ldr	r2, [r4, #0]
 8001baa:	2300      	movs	r3, #0
 8001bac:	6013      	str	r3, [r2, #0]
  (*node)->prev = NULL;
 8001bae:	6822      	ldr	r2, [r4, #0]
 8001bb0:	6053      	str	r3, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001bb2:	f385 8810 	msr	PRIMASK, r5
 8001bb6:	bd38      	pop	{r3, r4, r5, pc}

08001bb8 <list_get_size>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001bb8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8001bbc:	b672      	cpsid	i

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 8001bbe:	6802      	ldr	r2, [r0, #0]
  int size = 0;
 8001bc0:	2300      	movs	r3, #0
  while (temp != listHead)
 8001bc2:	4282      	cmp	r2, r0
 8001bc4:	d103      	bne.n	8001bce <list_get_size+0x16>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001bc6:	f381 8810 	msr	PRIMASK, r1
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	4770      	bx	lr
    size++;
 8001bce:	3301      	adds	r3, #1
    temp = temp->next;		
 8001bd0:	6812      	ldr	r2, [r2, #0]
 8001bd2:	e7f6      	b.n	8001bc2 <list_get_size+0xa>

08001bd4 <MX_BlueNRG_MS_Init>:
#endif

#define BDADDR_SIZE 6

void MX_BlueNRG_MS_Init(void)
{
 8001bd4:	b530      	push	{r4, r5, lr}

	uint16_t service_handle;
	uint16_t dev_name_char_handle;
	uint16_t appearance_char_handle;

	hci_init(user_notify, NULL);
 8001bd6:	2100      	movs	r1, #0
{
 8001bd8:	b087      	sub	sp, #28
	hci_init(user_notify, NULL);
 8001bda:	481d      	ldr	r0, [pc, #116]	; (8001c50 <MX_BlueNRG_MS_Init+0x7c>)
 8001bdc:	f7ff fe50 	bl	8001880 <hci_init>
	hci_reset();
 8001be0:	f7ff fde9 	bl	80017b6 <hci_reset>

	HAL_Delay(100);
 8001be4:	2064      	movs	r0, #100	; 0x64
 8001be6:	f7fe fccf 	bl	8000588 <HAL_Delay>

	BLUENRG_memcpy(bdaddr, SERVER_BDADDR, sizeof(SERVER_BDADDR));
 8001bea:	2302      	movs	r3, #2
 8001bec:	f88d 3011 	strb.w	r3, [sp, #17]
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	2106      	movs	r1, #6

	//set the server address to the BLE device.
	aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, bdaddr);
 8001bf4:	aa04      	add	r2, sp, #16
	BLUENRG_memcpy(bdaddr, SERVER_BDADDR, sizeof(SERVER_BDADDR));
 8001bf6:	2501      	movs	r5, #1
 8001bf8:	f88d 3012 	strb.w	r3, [sp, #18]
 8001bfc:	2404      	movs	r4, #4
 8001bfe:	2305      	movs	r3, #5
	aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, bdaddr);
 8001c00:	2000      	movs	r0, #0
	BLUENRG_memcpy(bdaddr, SERVER_BDADDR, sizeof(SERVER_BDADDR));
 8001c02:	f88d 3014 	strb.w	r3, [sp, #20]
 8001c06:	f88d 1015 	strb.w	r1, [sp, #21]
 8001c0a:	f88d 5010 	strb.w	r5, [sp, #16]
 8001c0e:	f88d 4013 	strb.w	r4, [sp, #19]
	aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, bdaddr);
 8001c12:	f7ff fd9e 	bl	8001752 <aci_hal_write_config_data>

	//initialize the generic attribute
	aci_gatt_init();
 8001c16:	f7ff fc04 	bl	8001422 <aci_gatt_init>

	//init the BLE IDB05A1 device set the role, get the service, device and characteristic handles
	aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8001c1a:	f10d 030e 	add.w	r3, sp, #14
 8001c1e:	9301      	str	r3, [sp, #4]
 8001c20:	ab03      	add	r3, sp, #12
 8001c22:	9300      	str	r3, [sp, #0]
 8001c24:	2207      	movs	r2, #7
 8001c26:	f10d 030a 	add.w	r3, sp, #10
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	4628      	mov	r0, r5
 8001c2e:	f7ff fb5d 	bl	80012ec <aci_gap_init_IDB05A1>

	//Update the generic attribute profile
	aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0, strlen(name), (uint8_t *)name);
 8001c32:	4b08      	ldr	r3, [pc, #32]	; (8001c54 <MX_BlueNRG_MS_Init+0x80>)
 8001c34:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8001c38:	9300      	str	r3, [sp, #0]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	4623      	mov	r3, r4
 8001c3e:	f8bd 000a 	ldrh.w	r0, [sp, #10]
 8001c42:	f7ff fd2a 	bl	800169a <aci_gatt_update_char_value>

	//Add Service
	addServices();
 8001c46:	f000 fa1d 	bl	8002084 <addServices>

  /* USER CODE END SV */
}
 8001c4a:	b007      	add	sp, #28
 8001c4c:	bd30      	pop	{r4, r5, pc}
 8001c4e:	bf00      	nop
 8001c50:	080022ed 	.word	0x080022ed
 8001c54:	0800265f 	.word	0x0800265f

08001c58 <MX_BlueNRG_MS_Process>:

/*
 * BlueNRG-MS background task
 */
void MX_BlueNRG_MS_Process(void)
{
 8001c58:	b500      	push	{lr}
  /* USER CODE BEGIN BlueNRG_MS_Process_PostTreatment */

	//Set local name
	const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME, 'N', 'U', 'C', 'L', 'E', 'O', '-', 'B', 'L', 'E'};
 8001c5a:	4a11      	ldr	r2, [pc, #68]	; (8001ca0 <MX_BlueNRG_MS_Process+0x48>)
{
 8001c5c:	b08d      	sub	sp, #52	; 0x34
	const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME, 'N', 'U', 'C', 'L', 'E', 'O', '-', 'B', 'L', 'E'};
 8001c5e:	6810      	ldr	r0, [r2, #0]
 8001c60:	6851      	ldr	r1, [r2, #4]
 8001c62:	ab09      	add	r3, sp, #36	; 0x24
 8001c64:	c303      	stmia	r3!, {r0, r1}
 8001c66:	8911      	ldrh	r1, [r2, #8]
 8001c68:	8019      	strh	r1, [r3, #0]

	//disable scan response
	hci_le_set_scan_resp_data(0, NULL);
 8001c6a:	2100      	movs	r1, #0
	const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME, 'N', 'U', 'C', 'L', 'E', 'O', '-', 'B', 'L', 'E'};
 8001c6c:	7a92      	ldrb	r2, [r2, #10]
 8001c6e:	709a      	strb	r2, [r3, #2]
	hci_le_set_scan_resp_data(0, NULL);
 8001c70:	4608      	mov	r0, r1
 8001c72:	f7ff fdbd 	bl	80017f0 <hci_le_set_scan_resp_data>

	//set the device into the discoverable mode
	aci_gap_set_discoverable(ADV_IND, 0, 0, PUBLIC_ADDR, NO_WHITE_LIST_USE, sizeof(local_name), local_name, 0, NULL, 0, 0);
 8001c76:	aa09      	add	r2, sp, #36	; 0x24
 8001c78:	2300      	movs	r3, #0
 8001c7a:	9202      	str	r2, [sp, #8]
 8001c7c:	220b      	movs	r2, #11
 8001c7e:	9306      	str	r3, [sp, #24]
 8001c80:	9305      	str	r3, [sp, #20]
 8001c82:	9304      	str	r3, [sp, #16]
 8001c84:	9303      	str	r3, [sp, #12]
 8001c86:	9201      	str	r2, [sp, #4]
 8001c88:	9300      	str	r3, [sp, #0]
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff fb6a 	bl	8001368 <aci_gap_set_discoverable>

	//process user events
	hci_user_evt_proc();
 8001c94:	f7ff feec 	bl	8001a70 <hci_user_evt_proc>
  
  /* USER CODE END BlueNRG_MS_Process_PostTreatment */
}
 8001c98:	b00d      	add	sp, #52	; 0x34
 8001c9a:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c9e:	bf00      	nop
 8001ca0:	08002654 	.word	0x08002654

08001ca4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001ca4:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca6:	2214      	movs	r2, #20
{
 8001ca8:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001caa:	eb0d 0002 	add.w	r0, sp, r2
 8001cae:	2100      	movs	r1, #0
 8001cb0:	f000 fcbb 	bl	800262a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cb4:	2400      	movs	r4, #0
 8001cb6:	4b26      	ldr	r3, [pc, #152]	; (8001d50 <MX_GPIO_Init+0xac>)
 8001cb8:	9401      	str	r4, [sp, #4]
 8001cba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_8, GPIO_PIN_RESET);
 8001cbc:	4d25      	ldr	r5, [pc, #148]	; (8001d54 <MX_GPIO_Init+0xb0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cbe:	f042 0204 	orr.w	r2, r2, #4
 8001cc2:	631a      	str	r2, [r3, #48]	; 0x30
 8001cc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cc6:	f002 0204 	and.w	r2, r2, #4
 8001cca:	9201      	str	r2, [sp, #4]
 8001ccc:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cce:	9402      	str	r4, [sp, #8]
 8001cd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cd2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001cd6:	631a      	str	r2, [r3, #48]	; 0x30
 8001cd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cda:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001cde:	9202      	str	r2, [sp, #8]
 8001ce0:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce2:	9403      	str	r4, [sp, #12]
 8001ce4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ce6:	f042 0201 	orr.w	r2, r2, #1
 8001cea:	631a      	str	r2, [r3, #48]	; 0x30
 8001cec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cee:	f002 0201 	and.w	r2, r2, #1
 8001cf2:	9203      	str	r2, [sp, #12]
 8001cf4:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cf6:	9404      	str	r4, [sp, #16]
 8001cf8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cfa:	f042 0202 	orr.w	r2, r2, #2
 8001cfe:	631a      	str	r2, [r3, #48]	; 0x30
 8001d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d02:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_8, GPIO_PIN_RESET);
 8001d06:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d08:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_8, GPIO_PIN_RESET);
 8001d0a:	4628      	mov	r0, r5
 8001d0c:	f44f 7181 	mov.w	r1, #258	; 0x102
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d10:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d12:	2601      	movs	r6, #1
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_8, GPIO_PIN_RESET);
 8001d14:	f7fe fe1c 	bl	8000950 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d18:	4b0f      	ldr	r3, [pc, #60]	; (8001d58 <MX_GPIO_Init+0xb4>)
 8001d1a:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d1c:	a905      	add	r1, sp, #20
 8001d1e:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d20:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d22:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d24:	f7fe fcca 	bl	80006bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_8;
 8001d28:	f44f 7381 	mov.w	r3, #258	; 0x102
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d2c:	a905      	add	r1, sp, #20
 8001d2e:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_8;
 8001d30:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d32:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d34:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d36:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d38:	f7fe fcc0 	bl	80006bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001d3c:	4622      	mov	r2, r4
 8001d3e:	4621      	mov	r1, r4
 8001d40:	2006      	movs	r0, #6
 8001d42:	f7fe fc47 	bl	80005d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001d46:	2006      	movs	r0, #6
 8001d48:	f7fe fc78 	bl	800063c <HAL_NVIC_EnableIRQ>

}
 8001d4c:	b00a      	add	sp, #40	; 0x28
 8001d4e:	bd70      	pop	{r4, r5, r6, pc}
 8001d50:	40023800 	.word	0x40023800
 8001d54:	40020000 	.word	0x40020000
 8001d58:	10110000 	.word	0x10110000

08001d5c <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct 
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 8001d5c:	b570      	push	{r4, r5, r6, lr}
 8001d5e:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct;
  
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d60:	2400      	movs	r4, #0
 8001d62:	4b16      	ldr	r3, [pc, #88]	; (8001dbc <HCI_TL_SPI_Init+0x60>)
 8001d64:	9400      	str	r4, [sp, #0]
 8001d66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  
  /*Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 8001d68:	4d15      	ldr	r5, [pc, #84]	; (8001dc0 <HCI_TL_SPI_Init+0x64>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d6a:	f042 0201 	orr.w	r2, r2, #1
 8001d6e:	631a      	str	r2, [r3, #48]	; 0x30
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d72:	9403      	str	r4, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d74:	f003 0301 	and.w	r3, r3, #1
 8001d78:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8001d7a:	2601      	movs	r6, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d7c:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d7e:	4b11      	ldr	r3, [pc, #68]	; (8001dc4 <HCI_TL_SPI_Init+0x68>)
 8001d80:	9302      	str	r3, [sp, #8]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 8001d82:	a901      	add	r1, sp, #4
 8001d84:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8001d86:	9601      	str	r6, [sp, #4]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 8001d88:	f7fe fc98 	bl	80006bc <HAL_GPIO_Init>
   
  /*Configure CS & RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 8001d8c:	f44f 7380 	mov.w	r3, #256	; 0x100
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 8001d90:	a901      	add	r1, sp, #4
 8001d92:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 8001d94:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d96:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d98:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d9a:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 8001d9c:	f7fe fc8e 	bl	80006bc <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 8001da0:	2302      	movs	r3, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct); 
 8001da2:	a901      	add	r1, sp, #4
 8001da4:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 8001da6:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001da8:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001daa:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dac:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct); 
 8001dae:	f7fe fc85 	bl	80006bc <HAL_GPIO_Init>
    
  return BSP_SPI1_Init();
 8001db2:	f000 fb1d 	bl	80023f0 <BSP_SPI1_Init>
}
 8001db6:	b006      	add	sp, #24
 8001db8:	bd70      	pop	{r4, r5, r6, pc}
 8001dba:	bf00      	nop
 8001dbc:	40023800 	.word	0x40023800
 8001dc0:	40020000 	.word	0x40020000
 8001dc4:	10110000 	.word	0x10110000

08001dc8 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8001dc8:	b510      	push	{r4, lr}
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN); 
 8001dca:	4c08      	ldr	r4, [pc, #32]	; (8001dec <HCI_TL_SPI_DeInit+0x24>)
 8001dcc:	2101      	movs	r1, #1
 8001dce:	4620      	mov	r0, r4
 8001dd0:	f7fe fd42 	bl	8000858 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN); 
 8001dd4:	4620      	mov	r0, r4
 8001dd6:	2102      	movs	r1, #2
 8001dd8:	f7fe fd3e 	bl	8000858 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);   
 8001ddc:	4620      	mov	r0, r4
 8001dde:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001de2:	f7fe fd39 	bl	8000858 <HAL_GPIO_DeInit>
  return 0;
}
 8001de6:	2000      	movs	r0, #0
 8001de8:	bd10      	pop	{r4, pc}
 8001dea:	bf00      	nop
 8001dec:	40020000 	.word	0x40020000

08001df0 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 8001df0:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 8001df2:	4c0a      	ldr	r4, [pc, #40]	; (8001e1c <HCI_TL_SPI_Reset+0x2c>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001dfa:	4620      	mov	r0, r4
 8001dfc:	f7fe fda8 	bl	8000950 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8001e00:	2005      	movs	r0, #5
 8001e02:	f7fe fbc1 	bl	8000588 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 8001e06:	2201      	movs	r2, #1
 8001e08:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e0c:	4620      	mov	r0, r4
 8001e0e:	f7fe fd9f 	bl	8000950 <HAL_GPIO_WritePin>
  HAL_Delay(5);    
 8001e12:	2005      	movs	r0, #5
 8001e14:	f7fe fbb8 	bl	8000588 <HAL_Delay>
  return 0;
}  
 8001e18:	2000      	movs	r0, #0
 8001e1a:	bd10      	pop	{r4, pc}
 8001e1c:	40020000 	.word	0x40020000

08001e20 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 8001e20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e22:	b087      	sub	sp, #28
  uint16_t byte_count;
  uint8_t len = 0;
  uint8_t char_ff = 0xff;
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8001e24:	2400      	movs	r4, #0
  uint8_t char_ff = 0xff;
 8001e26:	23ff      	movs	r3, #255	; 0xff
 8001e28:	f88d 3006 	strb.w	r3, [sp, #6]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8001e2c:	4622      	mov	r2, r4
  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8001e2e:	230b      	movs	r3, #11
{
 8001e30:	4607      	mov	r7, r0
 8001e32:	460e      	mov	r6, r1
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8001e34:	481d      	ldr	r0, [pc, #116]	; (8001eac <HCI_TL_SPI_Receive+0x8c>)
  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8001e36:	f88d 3008 	strb.w	r3, [sp, #8]
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8001e3a:	2102      	movs	r1, #2
  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8001e3c:	f88d 4009 	strb.w	r4, [sp, #9]
 8001e40:	f88d 400a 	strb.w	r4, [sp, #10]
 8001e44:	f88d 400b 	strb.w	r4, [sp, #11]
 8001e48:	f88d 400c 	strb.w	r4, [sp, #12]
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8001e4c:	f7fe fd80 	bl	8000950 <HAL_GPIO_WritePin>

  /* Read the header */  
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 8001e50:	2205      	movs	r2, #5
 8001e52:	a904      	add	r1, sp, #16
 8001e54:	a802      	add	r0, sp, #8
 8001e56:	f000 fa97 	bl	8002388 <BSP_SPI1_SendRecv>
  	
  if(header_slave[0] == 0x02) 
 8001e5a:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d121      	bne.n	8001ea6 <HCI_TL_SPI_Receive+0x86>
  {
    /* device is ready */
    byte_count = (header_slave[4] << 8)| header_slave[3];
 8001e62:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8001e66:	f89d 3013 	ldrb.w	r3, [sp, #19]
  
    if(byte_count > 0) {
 8001e6a:	ea53 2505 	orrs.w	r5, r3, r5, lsl #8
 8001e6e:	d007      	beq.n	8001e80 <HCI_TL_SPI_Receive+0x60>
 8001e70:	42ae      	cmp	r6, r5
 8001e72:	bf28      	it	cs
 8001e74:	462e      	movcs	r6, r5
 8001e76:	b2e5      	uxtb	r5, r4

      if (byte_count > size){
        byte_count = size;
      }        
  
      for(len = 0; len < byte_count; len++)
 8001e78:	42b5      	cmp	r5, r6
 8001e7a:	f104 0401 	add.w	r4, r4, #1
 8001e7e:	d307      	bcc.n	8001e90 <HCI_TL_SPI_Receive+0x70>
        buffer[len] = read_char;
      }      
    }    
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001e80:	2201      	movs	r2, #1
 8001e82:	2102      	movs	r1, #2
 8001e84:	4809      	ldr	r0, [pc, #36]	; (8001eac <HCI_TL_SPI_Receive+0x8c>)
 8001e86:	f7fe fd63 	bl	8000950 <HAL_GPIO_WritePin>
    PRINT_CSV("\n");
  }
#endif
  
  return len;  
}
 8001e8a:	4628      	mov	r0, r5
 8001e8c:	b007      	add	sp, #28
 8001e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        BSP_SPI1_SendRecv(&char_ff, (uint8_t*)&read_char, 1);  
 8001e90:	2201      	movs	r2, #1
 8001e92:	f10d 0107 	add.w	r1, sp, #7
 8001e96:	f10d 0006 	add.w	r0, sp, #6
 8001e9a:	f000 fa75 	bl	8002388 <BSP_SPI1_SendRecv>
        buffer[len] = read_char;
 8001e9e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001ea2:	557b      	strb	r3, [r7, r5]
 8001ea4:	e7e7      	b.n	8001e76 <HCI_TL_SPI_Receive+0x56>
  uint8_t len = 0;
 8001ea6:	4625      	mov	r5, r4
 8001ea8:	e7ea      	b.n	8001e80 <HCI_TL_SPI_Receive+0x60>
 8001eaa:	bf00      	nop
 8001eac:	40020000 	.word	0x40020000

08001eb0 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{  
 8001eb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001eb4:	b085      	sub	sp, #20
  int32_t result;  
  
  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8001eb6:	230a      	movs	r3, #10
 8001eb8:	f88d 3000 	strb.w	r3, [sp]
 8001ebc:	2300      	movs	r3, #0
{  
 8001ebe:	4680      	mov	r8, r0
 8001ec0:	460d      	mov	r5, r1
  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8001ec2:	f88d 3001 	strb.w	r3, [sp, #1]
 8001ec6:	f88d 3002 	strb.w	r3, [sp, #2]
 8001eca:	f88d 3003 	strb.w	r3, [sp, #3]
 8001ece:	f88d 3004 	strb.w	r3, [sp, #4]
  uint8_t header_slave[HEADER_SIZE];
  
  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 8001ed2:	f7fe fb53 	bl	800057c <HAL_GetTick>
  do
  {
    result = 0;
    
    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8001ed6:	4e1a      	ldr	r6, [pc, #104]	; (8001f40 <HCI_TL_SPI_Send+0x90>)
    if(header_slave[0] == 0x02) 
    {
      /* SPI is ready */
      if(header_slave[1] >= size) 
      {
        BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 8001ed8:	f8df 9068 	ldr.w	r9, [pc, #104]	; 8001f44 <HCI_TL_SPI_Send+0x94>
  uint32_t tickstart = HAL_GetTick();
 8001edc:	4607      	mov	r7, r0
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8001ede:	2200      	movs	r2, #0
 8001ee0:	2102      	movs	r1, #2
 8001ee2:	4630      	mov	r0, r6
 8001ee4:	f7fe fd34 	bl	8000950 <HAL_GPIO_WritePin>
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 8001ee8:	2205      	movs	r2, #5
 8001eea:	a902      	add	r1, sp, #8
 8001eec:	4668      	mov	r0, sp
 8001eee:	f000 fa4b 	bl	8002388 <BSP_SPI1_SendRecv>
    if(header_slave[0] == 0x02) 
 8001ef2:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d119      	bne.n	8001f2e <HCI_TL_SPI_Send+0x7e>
      if(header_slave[1] >= size) 
 8001efa:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8001efe:	42ab      	cmp	r3, r5
 8001f00:	d318      	bcc.n	8001f34 <HCI_TL_SPI_Send+0x84>
        BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 8001f02:	462a      	mov	r2, r5
 8001f04:	4649      	mov	r1, r9
 8001f06:	4640      	mov	r0, r8
 8001f08:	f000 fa3e 	bl	8002388 <BSP_SPI1_SendRecv>
    result = 0;
 8001f0c:	2400      	movs	r4, #0
      /* SPI is not ready */
      result = -1;
    }
    
    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001f0e:	2201      	movs	r2, #1
 8001f10:	2102      	movs	r1, #2
 8001f12:	4630      	mov	r0, r6
 8001f14:	f7fe fd1c 	bl	8000950 <HAL_GPIO_WritePin>
    
    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 8001f18:	f7fe fb30 	bl	800057c <HAL_GetTick>
 8001f1c:	1bc0      	subs	r0, r0, r7
 8001f1e:	280f      	cmp	r0, #15
 8001f20:	d80b      	bhi.n	8001f3a <HCI_TL_SPI_Send+0x8a>
    {
      result = -3;
      break;
    }
  } while(result < 0);
 8001f22:	2c00      	cmp	r4, #0
 8001f24:	d1db      	bne.n	8001ede <HCI_TL_SPI_Send+0x2e>
  
  return result;
}
 8001f26:	4620      	mov	r0, r4
 8001f28:	b005      	add	sp, #20
 8001f2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      result = -1;
 8001f2e:	f04f 34ff 	mov.w	r4, #4294967295
 8001f32:	e7ec      	b.n	8001f0e <HCI_TL_SPI_Send+0x5e>
        result = -2;
 8001f34:	f06f 0401 	mvn.w	r4, #1
 8001f38:	e7e9      	b.n	8001f0e <HCI_TL_SPI_Send+0x5e>
      result = -3;
 8001f3a:	f06f 0402 	mvn.w	r4, #2
  return result;
 8001f3e:	e7f2      	b.n	8001f26 <HCI_TL_SPI_Send+0x76>
 8001f40:	40020000 	.word	0x40020000
 8001f44:	20000314 	.word	0x20000314

08001f48 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 8001f48:	b510      	push	{r4, lr}
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8001f4a:	4c06      	ldr	r4, [pc, #24]	; (8001f64 <hci_tl_lowlevel_isr+0x1c>)
 8001f4c:	2101      	movs	r1, #1
 8001f4e:	4620      	mov	r0, r4
 8001f50:	f7fe fcf8 	bl	8000944 <HAL_GPIO_ReadPin>
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 8001f54:	2801      	cmp	r0, #1
 8001f56:	d104      	bne.n	8001f62 <hci_tl_lowlevel_isr+0x1a>
  {        
    if (hci_notify_asynch_evt(NULL))
 8001f58:	2000      	movs	r0, #0
 8001f5a:	f7ff fda9 	bl	8001ab0 <hci_notify_asynch_evt>
 8001f5e:	2800      	cmp	r0, #0
 8001f60:	d0f4      	beq.n	8001f4c <hci_tl_lowlevel_isr+0x4>
 8001f62:	bd10      	pop	{r4, pc}
 8001f64:	40020000 	.word	0x40020000

08001f68 <hci_tl_lowlevel_init>:
{
 8001f68:	b510      	push	{r4, lr}
 8001f6a:	b088      	sub	sp, #32
  fops.Init    = HCI_TL_SPI_Init;
 8001f6c:	4b11      	ldr	r3, [pc, #68]	; (8001fb4 <hci_tl_lowlevel_init+0x4c>)
 8001f6e:	9301      	str	r3, [sp, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 8001f70:	4b11      	ldr	r3, [pc, #68]	; (8001fb8 <hci_tl_lowlevel_init+0x50>)
 8001f72:	9302      	str	r3, [sp, #8]
  fops.Send    = HCI_TL_SPI_Send;
 8001f74:	4b11      	ldr	r3, [pc, #68]	; (8001fbc <hci_tl_lowlevel_init+0x54>)
 8001f76:	9305      	str	r3, [sp, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 8001f78:	4b11      	ldr	r3, [pc, #68]	; (8001fc0 <hci_tl_lowlevel_init+0x58>)
 8001f7a:	9304      	str	r3, [sp, #16]
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 8001f7c:	4c11      	ldr	r4, [pc, #68]	; (8001fc4 <hci_tl_lowlevel_init+0x5c>)
  fops.Reset   = HCI_TL_SPI_Reset;
 8001f7e:	4b12      	ldr	r3, [pc, #72]	; (8001fc8 <hci_tl_lowlevel_init+0x60>)
 8001f80:	9303      	str	r3, [sp, #12]
  hci_register_io_bus (&fops);
 8001f82:	a801      	add	r0, sp, #4
  fops.GetTick = BSP_GetTick;
 8001f84:	4b11      	ldr	r3, [pc, #68]	; (8001fcc <hci_tl_lowlevel_init+0x64>)
 8001f86:	9307      	str	r3, [sp, #28]
  hci_register_io_bus (&fops);
 8001f88:	f7ff fca4 	bl	80018d4 <hci_register_io_bus>
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 8001f8c:	f04f 61c0 	mov.w	r1, #100663296	; 0x6000000
 8001f90:	4620      	mov	r0, r4
 8001f92:	f7fe fb7d 	bl	8000690 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti0, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 8001f96:	4a0e      	ldr	r2, [pc, #56]	; (8001fd0 <hci_tl_lowlevel_init+0x68>)
 8001f98:	2100      	movs	r1, #0
 8001f9a:	4620      	mov	r0, r4
 8001f9c:	f7fe fb72 	bl	8000684 <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	4611      	mov	r1, r2
 8001fa4:	2006      	movs	r0, #6
 8001fa6:	f7fe fb15 	bl	80005d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001faa:	2006      	movs	r0, #6
 8001fac:	f7fe fb46 	bl	800063c <HAL_NVIC_EnableIRQ>
}
 8001fb0:	b008      	add	sp, #32
 8001fb2:	bd10      	pop	{r4, pc}
 8001fb4:	08001d5d 	.word	0x08001d5d
 8001fb8:	08001dc9 	.word	0x08001dc9
 8001fbc:	08001eb1 	.word	0x08001eb1
 8001fc0:	08001e21 	.word	0x08001e21
 8001fc4:	20000434 	.word	0x20000434
 8001fc8:	08001df1 	.word	0x08001df1
 8001fcc:	080023b1 	.word	0x080023b1
 8001fd0:	08001f49 	.word	0x08001f49

08001fd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fd4:	b530      	push	{r4, r5, lr}
 8001fd6:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fd8:	2230      	movs	r2, #48	; 0x30
 8001fda:	2100      	movs	r1, #0
 8001fdc:	a808      	add	r0, sp, #32
 8001fde:	f000 fb24 	bl	800262a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	2214      	movs	r2, #20
 8001fe6:	a803      	add	r0, sp, #12
 8001fe8:	f000 fb1f 	bl	800262a <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fec:	2400      	movs	r4, #0
 8001fee:	4b1b      	ldr	r3, [pc, #108]	; (800205c <SystemClock_Config+0x88>)
 8001ff0:	9401      	str	r4, [sp, #4]
 8001ff2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ff4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001ff8:	641a      	str	r2, [r3, #64]	; 0x40
 8001ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002000:	9301      	str	r3, [sp, #4]
 8002002:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002004:	4b16      	ldr	r3, [pc, #88]	; (8002060 <SystemClock_Config+0x8c>)
 8002006:	9402      	str	r4, [sp, #8]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800200e:	601a      	str	r2, [r3, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002012:	940f      	str	r4, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002014:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002018:	9302      	str	r3, [sp, #8]
 800201a:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800201c:	2301      	movs	r3, #1
 800201e:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002020:	2310      	movs	r3, #16
 8002022:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002024:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002026:	f44f 73a8 	mov.w	r3, #336	; 0x150
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800202a:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLN = 336;
 800202c:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800202e:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002030:	2304      	movs	r3, #4
 8002032:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002034:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002036:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002038:	950e      	str	r5, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800203a:	f7fe fc8f 	bl	800095c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800203e:	230f      	movs	r3, #15
 8002040:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002042:	4629      	mov	r1, r5
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002044:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002048:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800204a:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800204c:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800204e:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002050:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002052:	f7fe fe57 	bl	8000d04 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8002056:	b015      	add	sp, #84	; 0x54
 8002058:	bd30      	pop	{r4, r5, pc}
 800205a:	bf00      	nop
 800205c:	40023800 	.word	0x40023800
 8002060:	40007000 	.word	0x40007000

08002064 <main>:
{
 8002064:	b508      	push	{r3, lr}
  HAL_Init();
 8002066:	f7fe fa63 	bl	8000530 <HAL_Init>
  SystemClock_Config();
 800206a:	f7ff ffb3 	bl	8001fd4 <SystemClock_Config>
  MX_GPIO_Init();
 800206e:	f7ff fe19 	bl	8001ca4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002072:	f000 fa2d 	bl	80024d0 <MX_USART2_UART_Init>
  MX_BlueNRG_MS_Init();
 8002076:	f7ff fdad 	bl	8001bd4 <MX_BlueNRG_MS_Init>
  MX_BlueNRG_MS_Process();
 800207a:	f7ff fded 	bl	8001c58 <MX_BlueNRG_MS_Process>
 800207e:	e7fc      	b.n	800207a <main+0x16>

08002080 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002080:	4770      	bx	lr
	...

08002084 <addServices>:
uint16_t humCharHandle;

uint16_t tempDescHandle;

tBleStatus addServices(void)
{
 8002084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002088:	b08c      	sub	sp, #48	; 0x30
	tBleStatus ret;

	charactFormat charFormat;

	//Add service
	aci_gatt_add_serv(UUID_TYPE_128, health_service_uuid, PRIMARY_SERVICE, 7, &healthServHandle);
 800208a:	f8df 911c 	ldr.w	r9, [pc, #284]	; 80021a8 <addServices+0x124>
	aci_gatt_add_serv(UUID_TYPE_128, weather_service_uuid, PRIMARY_SERVICE, 7, &weatherServHandle);
 800208e:	f8df 811c 	ldr.w	r8, [pc, #284]	; 80021ac <addServices+0x128>
	aci_gatt_add_serv(UUID_TYPE_128, health_service_uuid, PRIMARY_SERVICE, 7, &healthServHandle);
 8002092:	f8cd 9000 	str.w	r9, [sp]
 8002096:	2307      	movs	r3, #7
 8002098:	2201      	movs	r2, #1
 800209a:	4938      	ldr	r1, [pc, #224]	; (800217c <addServices+0xf8>)

	//Add characteristics for weather service
	ret = aci_gatt_add_char(weatherServHandle, UUID_TYPE_128, temp_char_uuid, 2, CHAR_PROP_READ, ATTR_PERMISSION_NONE, GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP, 16, 0, &tempCharHandle);
 800209c:	f8df a110 	ldr.w	sl, [pc, #272]	; 80021b0 <addServices+0x12c>
	aci_gatt_add_serv(UUID_TYPE_128, health_service_uuid, PRIMARY_SERVICE, 7, &healthServHandle);
 80020a0:	2002      	movs	r0, #2
	ret = aci_gatt_add_char(weatherServHandle, UUID_TYPE_128, temp_char_uuid, 2, CHAR_PROP_READ, ATTR_PERMISSION_NONE, GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP, 16, 0, &tempCharHandle);
 80020a2:	2400      	movs	r4, #0
 80020a4:	2502      	movs	r5, #2
	aci_gatt_add_serv(UUID_TYPE_128, health_service_uuid, PRIMARY_SERVICE, 7, &healthServHandle);
 80020a6:	f7ff f9db 	bl	8001460 <aci_gatt_add_serv>
	ret = aci_gatt_add_char(weatherServHandle, UUID_TYPE_128, temp_char_uuid, 2, CHAR_PROP_READ, ATTR_PERMISSION_NONE, GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP, 16, 0, &tempCharHandle);
 80020aa:	2610      	movs	r6, #16
 80020ac:	2704      	movs	r7, #4
	aci_gatt_add_serv(UUID_TYPE_128, weather_service_uuid, PRIMARY_SERVICE, 7, &weatherServHandle);
 80020ae:	f8cd 8000 	str.w	r8, [sp]
 80020b2:	2307      	movs	r3, #7
 80020b4:	2201      	movs	r2, #1
 80020b6:	4932      	ldr	r1, [pc, #200]	; (8002180 <addServices+0xfc>)
 80020b8:	2002      	movs	r0, #2
 80020ba:	f7ff f9d1 	bl	8001460 <aci_gatt_add_serv>
	ret = aci_gatt_add_char(weatherServHandle, UUID_TYPE_128, temp_char_uuid, 2, CHAR_PROP_READ, ATTR_PERMISSION_NONE, GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP, 16, 0, &tempCharHandle);
 80020be:	462b      	mov	r3, r5
 80020c0:	4629      	mov	r1, r5
 80020c2:	f8b8 0000 	ldrh.w	r0, [r8]
 80020c6:	f8cd a014 	str.w	sl, [sp, #20]
 80020ca:	9404      	str	r4, [sp, #16]
 80020cc:	9603      	str	r6, [sp, #12]
 80020ce:	9702      	str	r7, [sp, #8]
 80020d0:	9401      	str	r4, [sp, #4]
 80020d2:	9500      	str	r5, [sp, #0]
 80020d4:	4a2b      	ldr	r2, [pc, #172]	; (8002184 <addServices+0x100>)
 80020d6:	f7ff fa06 	bl	80014e6 <aci_gatt_add_char>
	ret = aci_gatt_add_char(weatherServHandle, UUID_TYPE_128, hum_char_uuid , 2, CHAR_PROP_READ, ATTR_PERMISSION_NONE, GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP, 16, 0, &humCharHandle);
 80020da:	4b2b      	ldr	r3, [pc, #172]	; (8002188 <addServices+0x104>)
 80020dc:	9305      	str	r3, [sp, #20]
 80020de:	4629      	mov	r1, r5
 80020e0:	462b      	mov	r3, r5
 80020e2:	f8b8 0000 	ldrh.w	r0, [r8]
 80020e6:	9404      	str	r4, [sp, #16]
 80020e8:	9603      	str	r6, [sp, #12]
 80020ea:	9702      	str	r7, [sp, #8]
 80020ec:	9401      	str	r4, [sp, #4]
 80020ee:	9500      	str	r5, [sp, #0]
 80020f0:	4a26      	ldr	r2, [pc, #152]	; (800218c <addServices+0x108>)
 80020f2:	f7ff f9f8 	bl	80014e6 <aci_gatt_add_char>

	charFormat.format = FORMAT_SINT16;
 80020f6:	230e      	movs	r3, #14
 80020f8:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
	charFormat.exp = -1;
 80020fc:	23ff      	movs	r3, #255	; 0xff
 80020fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
	charFormat.unit = UNIT_TEMP_CELSIUS;
 8002102:	f242 732f 	movw	r3, #10031	; 0x272f
 8002106:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	charFormat.name_space = 0;
	charFormat.desc = 0;

	//Add Descriptor
	aci_gatt_add_char_desc(weatherServHandle, tempCharHandle, UUID_TYPE_16, (uint8_t*)temp_desc_uuid, 7, 7, (void*)&charFormat, ATTR_PERMISSION_NONE, ATTR_ACCESS_READ_ONLY, 0, 16, FALSE, &tempDescHandle);
 800210a:	4b21      	ldr	r3, [pc, #132]	; (8002190 <addServices+0x10c>)
 800210c:	9308      	str	r3, [sp, #32]
 800210e:	ab0a      	add	r3, sp, #40	; 0x28
 8002110:	2201      	movs	r2, #1
 8002112:	9302      	str	r3, [sp, #8]
 8002114:	2307      	movs	r3, #7
 8002116:	f8ba 1000 	ldrh.w	r1, [sl]
 800211a:	9204      	str	r2, [sp, #16]
 800211c:	9301      	str	r3, [sp, #4]
 800211e:	9300      	str	r3, [sp, #0]
 8002120:	f8b8 0000 	ldrh.w	r0, [r8]
 8002124:	9407      	str	r4, [sp, #28]
 8002126:	9606      	str	r6, [sp, #24]
 8002128:	9405      	str	r4, [sp, #20]
 800212a:	9403      	str	r4, [sp, #12]
 800212c:	4b19      	ldr	r3, [pc, #100]	; (8002194 <addServices+0x110>)
	charFormat.name_space = 0;
 800212e:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
	charFormat.desc = 0;
 8002132:	f88d 402d 	strb.w	r4, [sp, #45]	; 0x2d
 8002136:	f88d 402e 	strb.w	r4, [sp, #46]	; 0x2e
	aci_gatt_add_char_desc(weatherServHandle, tempCharHandle, UUID_TYPE_16, (uint8_t*)temp_desc_uuid, 7, 7, (void*)&charFormat, ATTR_PERMISSION_NONE, ATTR_ACCESS_READ_ONLY, 0, 16, FALSE, &tempDescHandle);
 800213a:	f7ff fa32 	bl	80015a2 <aci_gatt_add_char_desc>

	//Add characteristics for health service
	ret = aci_gatt_add_char(healthServHandle, UUID_TYPE_128, bpm_char_uuid,    2, CHAR_PROP_READ, ATTR_PERMISSION_NONE, GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP, 16, 0, &bpmCharHandle);
 800213e:	4b16      	ldr	r3, [pc, #88]	; (8002198 <addServices+0x114>)
 8002140:	9305      	str	r3, [sp, #20]
 8002142:	4629      	mov	r1, r5
 8002144:	462b      	mov	r3, r5
 8002146:	f8b9 0000 	ldrh.w	r0, [r9]
 800214a:	9404      	str	r4, [sp, #16]
 800214c:	9603      	str	r6, [sp, #12]
 800214e:	9702      	str	r7, [sp, #8]
 8002150:	9401      	str	r4, [sp, #4]
 8002152:	9500      	str	r5, [sp, #0]
 8002154:	4a11      	ldr	r2, [pc, #68]	; (800219c <addServices+0x118>)
 8002156:	f7ff f9c6 	bl	80014e6 <aci_gatt_add_char>
	ret = aci_gatt_add_char(healthServHandle, UUID_TYPE_128, weight_char_uuid, 2, CHAR_PROP_READ, ATTR_PERMISSION_NONE, GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP, 16, 0, &weightCharHandle);
 800215a:	4b11      	ldr	r3, [pc, #68]	; (80021a0 <addServices+0x11c>)
 800215c:	9305      	str	r3, [sp, #20]
 800215e:	f8b9 0000 	ldrh.w	r0, [r9]
 8002162:	9404      	str	r4, [sp, #16]
 8002164:	9603      	str	r6, [sp, #12]
 8002166:	9702      	str	r7, [sp, #8]
 8002168:	9401      	str	r4, [sp, #4]
 800216a:	9500      	str	r5, [sp, #0]
 800216c:	462b      	mov	r3, r5
 800216e:	4a0d      	ldr	r2, [pc, #52]	; (80021a4 <addServices+0x120>)
 8002170:	4629      	mov	r1, r5
 8002172:	f7ff f9b8 	bl	80014e6 <aci_gatt_add_char>

	return ret;
}
 8002176:	b00c      	add	sp, #48	; 0x30
 8002178:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800217c:	08002674 	.word	0x08002674
 8002180:	080026a6 	.word	0x080026a6
 8002184:	08002694 	.word	0x08002694
 8002188:	20000446 	.word	0x20000446
 800218c:	08002684 	.word	0x08002684
 8002190:	20000444 	.word	0x20000444
 8002194:	080026a4 	.word	0x080026a4
 8002198:	20000448 	.word	0x20000448
 800219c:	08002664 	.word	0x08002664
 80021a0:	2000043e 	.word	0x2000043e
 80021a4:	080026b6 	.word	0x080026b6
 80021a8:	2000043c 	.word	0x2000043c
 80021ac:	20000440 	.word	0x20000440
 80021b0:	20000442 	.word	0x20000442

080021b4 <updateBpmData>:

//update bpm data
void updateBpmData(uint16_t new_data)
{
 80021b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	aci_gatt_update_char_value(healthServHandle, bpmCharHandle, 0, 2, (uint8_t*)&new_data);
 80021b6:	4a07      	ldr	r2, [pc, #28]	; (80021d4 <updateBpmData+0x20>)
{
 80021b8:	ab04      	add	r3, sp, #16
	aci_gatt_update_char_value(healthServHandle, bpmCharHandle, 0, 2, (uint8_t*)&new_data);
 80021ba:	8811      	ldrh	r1, [r2, #0]
{
 80021bc:	f823 0d02 	strh.w	r0, [r3, #-2]!
	aci_gatt_update_char_value(healthServHandle, bpmCharHandle, 0, 2, (uint8_t*)&new_data);
 80021c0:	4a05      	ldr	r2, [pc, #20]	; (80021d8 <updateBpmData+0x24>)
 80021c2:	8810      	ldrh	r0, [r2, #0]
 80021c4:	9300      	str	r3, [sp, #0]
 80021c6:	2200      	movs	r2, #0
 80021c8:	2302      	movs	r3, #2
 80021ca:	f7ff fa66 	bl	800169a <aci_gatt_update_char_value>
}
 80021ce:	b005      	add	sp, #20
 80021d0:	f85d fb04 	ldr.w	pc, [sp], #4
 80021d4:	20000448 	.word	0x20000448
 80021d8:	2000043c 	.word	0x2000043c

080021dc <updateWeightData>:

//update weight data
void updateWeightData(uint16_t new_data)
{
 80021dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	aci_gatt_update_char_value(healthServHandle, weightCharHandle, 0, 2, (uint8_t*)&new_data);
 80021de:	4a07      	ldr	r2, [pc, #28]	; (80021fc <updateWeightData+0x20>)
{
 80021e0:	ab04      	add	r3, sp, #16
	aci_gatt_update_char_value(healthServHandle, weightCharHandle, 0, 2, (uint8_t*)&new_data);
 80021e2:	8811      	ldrh	r1, [r2, #0]
{
 80021e4:	f823 0d02 	strh.w	r0, [r3, #-2]!
	aci_gatt_update_char_value(healthServHandle, weightCharHandle, 0, 2, (uint8_t*)&new_data);
 80021e8:	4a05      	ldr	r2, [pc, #20]	; (8002200 <updateWeightData+0x24>)
 80021ea:	8810      	ldrh	r0, [r2, #0]
 80021ec:	9300      	str	r3, [sp, #0]
 80021ee:	2200      	movs	r2, #0
 80021f0:	2302      	movs	r3, #2
 80021f2:	f7ff fa52 	bl	800169a <aci_gatt_update_char_value>
}
 80021f6:	b005      	add	sp, #20
 80021f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80021fc:	2000043e 	.word	0x2000043e
 8002200:	2000043c 	.word	0x2000043c

08002204 <updateHumData>:

//update humidity data
void updateHumData(uint16_t new_data)
{
 8002204:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	aci_gatt_update_char_value(weatherServHandle, humCharHandle, 0, 2, (uint8_t*)&new_data);
 8002206:	4a07      	ldr	r2, [pc, #28]	; (8002224 <updateHumData+0x20>)
{
 8002208:	ab04      	add	r3, sp, #16
	aci_gatt_update_char_value(weatherServHandle, humCharHandle, 0, 2, (uint8_t*)&new_data);
 800220a:	8811      	ldrh	r1, [r2, #0]
{
 800220c:	f823 0d02 	strh.w	r0, [r3, #-2]!
	aci_gatt_update_char_value(weatherServHandle, humCharHandle, 0, 2, (uint8_t*)&new_data);
 8002210:	4a05      	ldr	r2, [pc, #20]	; (8002228 <updateHumData+0x24>)
 8002212:	8810      	ldrh	r0, [r2, #0]
 8002214:	9300      	str	r3, [sp, #0]
 8002216:	2200      	movs	r2, #0
 8002218:	2302      	movs	r3, #2
 800221a:	f7ff fa3e 	bl	800169a <aci_gatt_update_char_value>
}
 800221e:	b005      	add	sp, #20
 8002220:	f85d fb04 	ldr.w	pc, [sp], #4
 8002224:	20000446 	.word	0x20000446
 8002228:	20000440 	.word	0x20000440

0800222c <updateTempData>:

//update temperature data
void updateTempData(uint16_t new_data)
{
 800222c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	aci_gatt_update_char_value(weatherServHandle, tempCharHandle, 0, 2, (uint8_t*)&new_data);
 800222e:	4a07      	ldr	r2, [pc, #28]	; (800224c <updateTempData+0x20>)
{
 8002230:	ab04      	add	r3, sp, #16
	aci_gatt_update_char_value(weatherServHandle, tempCharHandle, 0, 2, (uint8_t*)&new_data);
 8002232:	8811      	ldrh	r1, [r2, #0]
{
 8002234:	f823 0d02 	strh.w	r0, [r3, #-2]!
	aci_gatt_update_char_value(weatherServHandle, tempCharHandle, 0, 2, (uint8_t*)&new_data);
 8002238:	4a05      	ldr	r2, [pc, #20]	; (8002250 <updateTempData+0x24>)
 800223a:	8810      	ldrh	r0, [r2, #0]
 800223c:	9300      	str	r3, [sp, #0]
 800223e:	2200      	movs	r2, #0
 8002240:	2302      	movs	r3, #2
 8002242:	f7ff fa2a 	bl	800169a <aci_gatt_update_char_value>
}
 8002246:	b005      	add	sp, #20
 8002248:	f85d fb04 	ldr.w	pc, [sp], #4
 800224c:	20000442 	.word	0x20000442
 8002250:	20000440 	.word	0x20000440

08002254 <Read_Request_CB>:
int temp = 20;
int hum = 80;

void Read_Request_CB(uint16_t handle)
{
	if (handle == bpmCharHandle + 1)
 8002254:	4b1c      	ldr	r3, [pc, #112]	; (80022c8 <Read_Request_CB+0x74>)
 8002256:	881b      	ldrh	r3, [r3, #0]
 8002258:	3301      	adds	r3, #1
 800225a:	4298      	cmp	r0, r3
{
 800225c:	b510      	push	{r4, lr}
 800225e:	4604      	mov	r4, r0
	if (handle == bpmCharHandle + 1)
 8002260:	d106      	bne.n	8002270 <Read_Request_CB+0x1c>
	{
		bpm +=2;
 8002262:	4b1a      	ldr	r3, [pc, #104]	; (80022cc <Read_Request_CB+0x78>)
 8002264:	6818      	ldr	r0, [r3, #0]
 8002266:	3002      	adds	r0, #2
 8002268:	6018      	str	r0, [r3, #0]
		updateBpmData(bpm);
 800226a:	b280      	uxth	r0, r0
 800226c:	f7ff ffa2 	bl	80021b4 <updateBpmData>
	}
	if (handle == weightCharHandle + 1)
 8002270:	4b17      	ldr	r3, [pc, #92]	; (80022d0 <Read_Request_CB+0x7c>)
 8002272:	881b      	ldrh	r3, [r3, #0]
 8002274:	3301      	adds	r3, #1
 8002276:	429c      	cmp	r4, r3
 8002278:	d106      	bne.n	8002288 <Read_Request_CB+0x34>
	{
		weight-=5;
 800227a:	4b16      	ldr	r3, [pc, #88]	; (80022d4 <Read_Request_CB+0x80>)
 800227c:	6818      	ldr	r0, [r3, #0]
 800227e:	3805      	subs	r0, #5
 8002280:	6018      	str	r0, [r3, #0]
		updateWeightData(weight);
 8002282:	b280      	uxth	r0, r0
 8002284:	f7ff ffaa 	bl	80021dc <updateWeightData>
	}
	if (handle == tempCharHandle + 1)
 8002288:	4b13      	ldr	r3, [pc, #76]	; (80022d8 <Read_Request_CB+0x84>)
 800228a:	881b      	ldrh	r3, [r3, #0]
 800228c:	3301      	adds	r3, #1
 800228e:	429c      	cmp	r4, r3
 8002290:	d106      	bne.n	80022a0 <Read_Request_CB+0x4c>
	{
		temp-=1;
 8002292:	4b12      	ldr	r3, [pc, #72]	; (80022dc <Read_Request_CB+0x88>)
 8002294:	6818      	ldr	r0, [r3, #0]
 8002296:	3801      	subs	r0, #1
 8002298:	6018      	str	r0, [r3, #0]
		updateTempData(temp);
 800229a:	b280      	uxth	r0, r0
 800229c:	f7ff ffc6 	bl	800222c <updateTempData>
	}
	if(handle == humCharHandle + 1)
 80022a0:	4b0f      	ldr	r3, [pc, #60]	; (80022e0 <Read_Request_CB+0x8c>)
 80022a2:	881b      	ldrh	r3, [r3, #0]
 80022a4:	3301      	adds	r3, #1
 80022a6:	429c      	cmp	r4, r3
 80022a8:	d106      	bne.n	80022b8 <Read_Request_CB+0x64>
	{
		hum+=2;
 80022aa:	4b0e      	ldr	r3, [pc, #56]	; (80022e4 <Read_Request_CB+0x90>)
 80022ac:	6818      	ldr	r0, [r3, #0]
 80022ae:	3002      	adds	r0, #2
 80022b0:	6018      	str	r0, [r3, #0]
		updateHumData(hum);
 80022b2:	b280      	uxth	r0, r0
 80022b4:	f7ff ffa6 	bl	8002204 <updateHumData>
	}

	if (connection_handle != 0)
 80022b8:	4b0b      	ldr	r3, [pc, #44]	; (80022e8 <Read_Request_CB+0x94>)
 80022ba:	8818      	ldrh	r0, [r3, #0]
 80022bc:	b118      	cbz	r0, 80022c6 <Read_Request_CB+0x72>
	{
		aci_gatt_allow_read(connection_handle);
	}
}
 80022be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		aci_gatt_allow_read(connection_handle);
 80022c2:	f7ff ba21 	b.w	8001708 <aci_gatt_allow_read>
 80022c6:	bd10      	pop	{r4, pc}
 80022c8:	20000448 	.word	0x20000448
 80022cc:	20000008 	.word	0x20000008
 80022d0:	2000043e 	.word	0x2000043e
 80022d4:	20000014 	.word	0x20000014
 80022d8:	20000442 	.word	0x20000442
 80022dc:	20000010 	.word	0x20000010
 80022e0:	20000446 	.word	0x20000446
 80022e4:	2000000c 	.word	0x2000000c
 80022e8:	20000418 	.word	0x20000418

080022ec <user_notify>:
{
	hci_uart_pckt* hci_pckt = pData;

	hci_event_pckt* event_pckt = (hci_event_pckt*)hci_pckt->data;

	if(hci_pckt->type != HCI_EVENT_PKT)
 80022ec:	7803      	ldrb	r3, [r0, #0]
 80022ee:	2b04      	cmp	r3, #4
 80022f0:	d119      	bne.n	8002326 <user_notify+0x3a>
		return;

	switch(event_pckt->evt)
 80022f2:	7843      	ldrb	r3, [r0, #1]
 80022f4:	2b3e      	cmp	r3, #62	; 0x3e
 80022f6:	d002      	beq.n	80022fe <user_notify+0x12>
 80022f8:	2bff      	cmp	r3, #255	; 0xff
 80022fa:	d00a      	beq.n	8002312 <user_notify+0x26>
 80022fc:	4770      	bx	lr
		}
		break;
		case EVT_LE_META_EVENT:
		{
			evt_le_meta_event* evt = (void*)event_pckt->data;
			switch(evt->subevent)
 80022fe:	78c3      	ldrb	r3, [r0, #3]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d110      	bne.n	8002326 <user_notify+0x3a>
	connected = TRUE;
 8002304:	4908      	ldr	r1, [pc, #32]	; (8002328 <user_notify+0x3c>)
			{
				case EVT_LE_CONN_COMPLETE:
				{
					evt_le_connection_complete* cc = (void*)evt->data;
					GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 8002306:	f8b0 2005 	ldrh.w	r2, [r0, #5]
	connected = TRUE;
 800230a:	600b      	str	r3, [r1, #0]
	connection_handle = handle;
 800230c:	4b07      	ldr	r3, [pc, #28]	; (800232c <user_notify+0x40>)
 800230e:	801a      	strh	r2, [r3, #0]
 8002310:	4770      	bx	lr
		}
		break;
		case EVT_VENDOR:
		{
			evt_blue_aci* blue_evt = (void *) event_pckt->data;
			switch(blue_evt->ecode)
 8002312:	f8b0 2003 	ldrh.w	r2, [r0, #3]
 8002316:	f640 4314 	movw	r3, #3092	; 0xc14
 800231a:	429a      	cmp	r2, r3
 800231c:	d103      	bne.n	8002326 <user_notify+0x3a>
			{
				case EVT_BLUE_GATT_READ_PERMIT_REQ:
				{
					evt_gatt_read_permit_req* pr = (void *) blue_evt->data;
					Read_Request_CB(pr->attr_handle);
 800231e:	f8b0 0007 	ldrh.w	r0, [r0, #7]
 8002322:	f7ff bf97 	b.w	8002254 <Read_Request_CB>
 8002326:	4770      	bx	lr
 8002328:	20000414 	.word	0x20000414
 800232c:	20000418 	.word	0x20000418

08002330 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002330:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002332:	4b0c      	ldr	r3, [pc, #48]	; (8002364 <HAL_MspInit+0x34>)
 8002334:	2100      	movs	r1, #0
 8002336:	9100      	str	r1, [sp, #0]
 8002338:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800233a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800233e:	645a      	str	r2, [r3, #68]	; 0x44
 8002340:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002342:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002346:	9200      	str	r2, [sp, #0]
 8002348:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800234a:	9101      	str	r1, [sp, #4]
 800234c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800234e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002352:	641a      	str	r2, [r3, #64]	; 0x40
 8002354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800235a:	9301      	str	r3, [sp, #4]
 800235c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800235e:	b002      	add	sp, #8
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	40023800 	.word	0x40023800

08002368 <NMI_Handler>:
 8002368:	4770      	bx	lr

0800236a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800236a:	e7fe      	b.n	800236a <HardFault_Handler>

0800236c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800236c:	e7fe      	b.n	800236c <MemManage_Handler>

0800236e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800236e:	e7fe      	b.n	800236e <BusFault_Handler>

08002370 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002370:	e7fe      	b.n	8002370 <UsageFault_Handler>

08002372 <SVC_Handler>:
 8002372:	4770      	bx	lr

08002374 <DebugMon_Handler>:
 8002374:	4770      	bx	lr

08002376 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002376:	4770      	bx	lr

08002378 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002378:	f7fe b8f4 	b.w	8000564 <HAL_IncTick>

0800237c <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 800237c:	4801      	ldr	r0, [pc, #4]	; (8002384 <EXTI0_IRQHandler+0x8>)
 800237e:	f7fe b98d 	b.w	800069c <HAL_EXTI_IRQHandler>
 8002382:	bf00      	nop
 8002384:	20000434 	.word	0x20000434

08002388 <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 8002388:	b507      	push	{r0, r1, r2, lr}
  int32_t ret = BSP_ERROR_NONE;
  
  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 800238a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800238e:	9300      	str	r3, [sp, #0]
 8002390:	4613      	mov	r3, r2
 8002392:	460a      	mov	r2, r1
 8002394:	4601      	mov	r1, r0
 8002396:	4805      	ldr	r0, [pc, #20]	; (80023ac <BSP_SPI1_SendRecv+0x24>)
 8002398:	f7fe fe18 	bl	8000fcc <HAL_SPI_TransmitReceive>
 800239c:	2800      	cmp	r0, #0
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
  }
  return ret;
}
 800239e:	bf14      	ite	ne
 80023a0:	f06f 0005 	mvnne.w	r0, #5
 80023a4:	2000      	moveq	r0, #0
 80023a6:	b003      	add	sp, #12
 80023a8:	f85d fb04 	ldr.w	pc, [sp], #4
 80023ac:	2000044c 	.word	0x2000044c

080023b0 <BSP_GetTick>:
/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
  return HAL_GetTick();
 80023b0:	f7fe b8e4 	b.w	800057c <HAL_GetTick>

080023b4 <MX_SPI1_Init>:

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
  HAL_StatusTypeDef ret = HAL_OK;
  hspi->Instance = SPI1;
  hspi->Init.Mode = SPI_MODE_MASTER;
 80023b4:	4a0d      	ldr	r2, [pc, #52]	; (80023ec <MX_SPI1_Init+0x38>)
 80023b6:	f44f 7c82 	mov.w	ip, #260	; 0x104
{
 80023ba:	b508      	push	{r3, lr}
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi->Init.NSS = SPI_NSS_SOFT;
 80023bc:	f44f 7100 	mov.w	r1, #512	; 0x200
  hspi->Init.Mode = SPI_MODE_MASTER;
 80023c0:	e880 1004 	stmia.w	r0, {r2, ip}
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 80023c4:	2200      	movs	r2, #0
 80023c6:	6082      	str	r2, [r0, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 80023c8:	60c2      	str	r2, [r0, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80023ca:	6102      	str	r2, [r0, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 80023cc:	6142      	str	r2, [r0, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 80023ce:	6181      	str	r1, [r0, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 80023d0:	6202      	str	r2, [r0, #32]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80023d2:	2118      	movs	r1, #24
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 80023d4:	6242      	str	r2, [r0, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023d6:	6282      	str	r2, [r0, #40]	; 0x28
  hspi->Init.CRCPolynomial = 10;
 80023d8:	220a      	movs	r2, #10
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80023da:	61c1      	str	r1, [r0, #28]
  hspi->Init.CRCPolynomial = 10;
 80023dc:	62c2      	str	r2, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 80023de:	f7fe fdb8 	bl	8000f52 <HAL_SPI_Init>
  {
    ret = HAL_ERROR;
  }

  return ret;
}
 80023e2:	3000      	adds	r0, #0
 80023e4:	bf18      	it	ne
 80023e6:	2001      	movne	r0, #1
 80023e8:	bd08      	pop	{r3, pc}
 80023ea:	bf00      	nop
 80023ec:	40013000 	.word	0x40013000

080023f0 <BSP_SPI1_Init>:
{
 80023f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(SPI1InitCounter++ == 0)
 80023f4:	4a29      	ldr	r2, [pc, #164]	; (800249c <BSP_SPI1_Init+0xac>)
  hspi1.Instance  = SPI1;
 80023f6:	4d2a      	ldr	r5, [pc, #168]	; (80024a0 <BSP_SPI1_Init+0xb0>)
 80023f8:	4b2a      	ldr	r3, [pc, #168]	; (80024a4 <BSP_SPI1_Init+0xb4>)
 80023fa:	602b      	str	r3, [r5, #0]
  if(SPI1InitCounter++ == 0)
 80023fc:	6813      	ldr	r3, [r2, #0]
 80023fe:	1c59      	adds	r1, r3, #1
{
 8002400:	b088      	sub	sp, #32
  if(SPI1InitCounter++ == 0)
 8002402:	6011      	str	r1, [r2, #0]
 8002404:	b11b      	cbz	r3, 800240e <BSP_SPI1_Init+0x1e>
  int32_t ret = BSP_ERROR_NONE;
 8002406:	2000      	movs	r0, #0
}
 8002408:	b008      	add	sp, #32
 800240a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET) 
 800240e:	4628      	mov	r0, r5
 8002410:	f7fe fecc 	bl	80011ac <HAL_SPI_GetState>
 8002414:	4604      	mov	r4, r0
 8002416:	2800      	cmp	r0, #0
 8002418:	d1f5      	bne.n	8002406 <BSP_SPI1_Init+0x16>
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800241a:	4b23      	ldr	r3, [pc, #140]	; (80024a8 <BSP_SPI1_Init+0xb8>)
 800241c:	9000      	str	r0, [sp, #0]
 800241e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002420:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002424:	645a      	str	r2, [r3, #68]	; 0x44
 8002426:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002428:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800242c:	9200      	str	r2, [sp, #0]
 800242e:	9a00      	ldr	r2, [sp, #0]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002430:	9001      	str	r0, [sp, #4]
 8002432:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002434:	f042 0201 	orr.w	r2, r2, #1
 8002438:	631a      	str	r2, [r3, #48]	; 0x30
 800243a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800243c:	f002 0201 	and.w	r2, r2, #1
 8002440:	9201      	str	r2, [sp, #4]
 8002442:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002444:	9002      	str	r0, [sp, #8]
 8002446:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002448:	f042 0202 	orr.w	r2, r2, #2
 800244c:	631a      	str	r2, [r3, #48]	; 0x30
 800244e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002450:	9005      	str	r0, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002452:	f003 0302 	and.w	r3, r3, #2
 8002456:	9302      	str	r3, [sp, #8]
 8002458:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800245a:	4814      	ldr	r0, [pc, #80]	; (80024ac <BSP_SPI1_Init+0xbc>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800245c:	23c0      	movs	r3, #192	; 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800245e:	f04f 0802 	mov.w	r8, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002462:	2703      	movs	r7, #3
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002464:	2605      	movs	r6, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002466:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002468:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800246a:	f8cd 8010 	str.w	r8, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800246e:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002470:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002472:	f7fe f923 	bl	80006bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002476:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002478:	480d      	ldr	r0, [pc, #52]	; (80024b0 <BSP_SPI1_Init+0xc0>)
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800247a:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800247c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800247e:	f8cd 8010 	str.w	r8, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002482:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002484:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002486:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002488:	f7fe f918 	bl	80006bc <HAL_GPIO_Init>
			if (MX_SPI1_Init(&hspi1) != HAL_OK)
 800248c:	4628      	mov	r0, r5
 800248e:	f7ff ff91 	bl	80023b4 <MX_SPI1_Init>
 8002492:	2800      	cmp	r0, #0
 8002494:	d0b7      	beq.n	8002406 <BSP_SPI1_Init+0x16>
				ret = BSP_ERROR_BUS_FAILURE;
 8002496:	f06f 0007 	mvn.w	r0, #7
  return ret;
 800249a:	e7b5      	b.n	8002408 <BSP_SPI1_Init+0x18>
 800249c:	2000041c 	.word	0x2000041c
 80024a0:	2000044c 	.word	0x2000044c
 80024a4:	40013000 	.word	0x40013000
 80024a8:	40023800 	.word	0x40023800
 80024ac:	40020000 	.word	0x40020000
 80024b0:	40020400 	.word	0x40020400

080024b4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024b4:	4b05      	ldr	r3, [pc, #20]	; (80024cc <SystemInit+0x18>)
 80024b6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80024ba:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80024be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80024c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80024c6:	609a      	str	r2, [r3, #8]
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	e000ed00 	.word	0xe000ed00

080024d0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80024d0:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
 80024d2:	480b      	ldr	r0, [pc, #44]	; (8002500 <MX_USART2_UART_Init+0x30>)
  huart2.Init.BaudRate = 115200;
 80024d4:	4b0b      	ldr	r3, [pc, #44]	; (8002504 <MX_USART2_UART_Init+0x34>)
 80024d6:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 80024da:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 80024de:	220c      	movs	r2, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80024e0:	2300      	movs	r3, #0
 80024e2:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80024e4:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80024e6:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80024e8:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024ea:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80024ec:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80024ee:	f7fe fecf 	bl	8001290 <HAL_UART_Init>
 80024f2:	b118      	cbz	r0, 80024fc <MX_USART2_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 80024f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80024f8:	f7ff bdc2 	b.w	8002080 <Error_Handler>
 80024fc:	bd08      	pop	{r3, pc}
 80024fe:	bf00      	nop
 8002500:	200004a4 	.word	0x200004a4
 8002504:	40004400 	.word	0x40004400

08002508 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002508:	b510      	push	{r4, lr}
 800250a:	4604      	mov	r4, r0
 800250c:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800250e:	2214      	movs	r2, #20
 8002510:	2100      	movs	r1, #0
 8002512:	a803      	add	r0, sp, #12
 8002514:	f000 f889 	bl	800262a <memset>
  if(uartHandle->Instance==USART2)
 8002518:	6822      	ldr	r2, [r4, #0]
 800251a:	4b15      	ldr	r3, [pc, #84]	; (8002570 <HAL_UART_MspInit+0x68>)
 800251c:	429a      	cmp	r2, r3
 800251e:	d124      	bne.n	800256a <HAL_UART_MspInit+0x62>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002520:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002524:	2100      	movs	r1, #0
 8002526:	9101      	str	r1, [sp, #4]
 8002528:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800252a:	4812      	ldr	r0, [pc, #72]	; (8002574 <HAL_UART_MspInit+0x6c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 800252c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002530:	641a      	str	r2, [r3, #64]	; 0x40
 8002532:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002534:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002538:	9201      	str	r2, [sp, #4]
 800253a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800253c:	9102      	str	r1, [sp, #8]
 800253e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002540:	f042 0201 	orr.w	r2, r2, #1
 8002544:	631a      	str	r2, [r3, #48]	; 0x30
 8002546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002548:	f003 0301 	and.w	r3, r3, #1
 800254c:	9302      	str	r3, [sp, #8]
 800254e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002550:	230c      	movs	r3, #12
 8002552:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002554:	2302      	movs	r3, #2
 8002556:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002558:	2301      	movs	r3, #1
 800255a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800255c:	2303      	movs	r3, #3
 800255e:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002560:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002562:	2307      	movs	r3, #7
 8002564:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002566:	f7fe f8a9 	bl	80006bc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800256a:	b008      	add	sp, #32
 800256c:	bd10      	pop	{r4, pc}
 800256e:	bf00      	nop
 8002570:	40004400 	.word	0x40004400
 8002574:	40020000 	.word	0x40020000

08002578 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002578:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025b0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800257c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800257e:	e003      	b.n	8002588 <LoopCopyDataInit>

08002580 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002580:	4b0c      	ldr	r3, [pc, #48]	; (80025b4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002582:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002584:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002586:	3104      	adds	r1, #4

08002588 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002588:	480b      	ldr	r0, [pc, #44]	; (80025b8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800258a:	4b0c      	ldr	r3, [pc, #48]	; (80025bc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800258c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800258e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002590:	d3f6      	bcc.n	8002580 <CopyDataInit>
  ldr  r2, =_sbss
 8002592:	4a0b      	ldr	r2, [pc, #44]	; (80025c0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002594:	e002      	b.n	800259c <LoopFillZerobss>

08002596 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002596:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002598:	f842 3b04 	str.w	r3, [r2], #4

0800259c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800259c:	4b09      	ldr	r3, [pc, #36]	; (80025c4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800259e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80025a0:	d3f9      	bcc.n	8002596 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80025a2:	f7ff ff87 	bl	80024b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025a6:	f000 f811 	bl	80025cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025aa:	f7ff fd5b 	bl	8002064 <main>
  bx  lr    
 80025ae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80025b0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80025b4:	080026f0 	.word	0x080026f0
  ldr  r0, =_sdata
 80025b8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80025bc:	2000001c 	.word	0x2000001c
  ldr  r2, =_sbss
 80025c0:	2000001c 	.word	0x2000001c
  ldr  r3, = _ebss
 80025c4:	200004e4 	.word	0x200004e4

080025c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025c8:	e7fe      	b.n	80025c8 <ADC_IRQHandler>
	...

080025cc <__libc_init_array>:
 80025cc:	b570      	push	{r4, r5, r6, lr}
 80025ce:	4e0d      	ldr	r6, [pc, #52]	; (8002604 <__libc_init_array+0x38>)
 80025d0:	4c0d      	ldr	r4, [pc, #52]	; (8002608 <__libc_init_array+0x3c>)
 80025d2:	1ba4      	subs	r4, r4, r6
 80025d4:	10a4      	asrs	r4, r4, #2
 80025d6:	2500      	movs	r5, #0
 80025d8:	42a5      	cmp	r5, r4
 80025da:	d109      	bne.n	80025f0 <__libc_init_array+0x24>
 80025dc:	4e0b      	ldr	r6, [pc, #44]	; (800260c <__libc_init_array+0x40>)
 80025de:	4c0c      	ldr	r4, [pc, #48]	; (8002610 <__libc_init_array+0x44>)
 80025e0:	f000 f82c 	bl	800263c <_init>
 80025e4:	1ba4      	subs	r4, r4, r6
 80025e6:	10a4      	asrs	r4, r4, #2
 80025e8:	2500      	movs	r5, #0
 80025ea:	42a5      	cmp	r5, r4
 80025ec:	d105      	bne.n	80025fa <__libc_init_array+0x2e>
 80025ee:	bd70      	pop	{r4, r5, r6, pc}
 80025f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80025f4:	4798      	blx	r3
 80025f6:	3501      	adds	r5, #1
 80025f8:	e7ee      	b.n	80025d8 <__libc_init_array+0xc>
 80025fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80025fe:	4798      	blx	r3
 8002600:	3501      	adds	r5, #1
 8002602:	e7f2      	b.n	80025ea <__libc_init_array+0x1e>
 8002604:	080026e8 	.word	0x080026e8
 8002608:	080026e8 	.word	0x080026e8
 800260c:	080026e8 	.word	0x080026e8
 8002610:	080026ec 	.word	0x080026ec

08002614 <memcpy>:
 8002614:	b510      	push	{r4, lr}
 8002616:	1e43      	subs	r3, r0, #1
 8002618:	440a      	add	r2, r1
 800261a:	4291      	cmp	r1, r2
 800261c:	d100      	bne.n	8002620 <memcpy+0xc>
 800261e:	bd10      	pop	{r4, pc}
 8002620:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002624:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002628:	e7f7      	b.n	800261a <memcpy+0x6>

0800262a <memset>:
 800262a:	4402      	add	r2, r0
 800262c:	4603      	mov	r3, r0
 800262e:	4293      	cmp	r3, r2
 8002630:	d100      	bne.n	8002634 <memset+0xa>
 8002632:	4770      	bx	lr
 8002634:	f803 1b01 	strb.w	r1, [r3], #1
 8002638:	e7f9      	b.n	800262e <memset+0x4>
	...

0800263c <_init>:
 800263c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800263e:	bf00      	nop
 8002640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002642:	bc08      	pop	{r3}
 8002644:	469e      	mov	lr, r3
 8002646:	4770      	bx	lr

08002648 <_fini>:
 8002648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800264a:	bf00      	nop
 800264c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800264e:	bc08      	pop	{r3}
 8002650:	469e      	mov	lr, r3
 8002652:	4770      	bx	lr
